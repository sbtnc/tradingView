// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// 2020-01-12

//@version=4
study("Day Week Month Highs & Lows", shorttitle = "DWM HL", overlay = true)

//------------------------------ Inputs ------------------------------

i_dayLookback		= input(defval = 2, minval = 0, title = "Previous Days")
i_weekLookback 		= input(defval = 1, minval = 0, title = "Previous Weeks")
i_monthLookback		= input(defval = 1, minval = 0, title = "Previous Months")

//----------------------------- Constants -----------------------------

var DEFAULT_COLOR	= #434651
var DEFAULT_TRANSP	= 0

//------------------------------ Styling ------------------------------

var dayColor		= color.new(DEFAULT_COLOR, DEFAULT_TRANSP)
var dayLinewidth	= 1
var dayStyle		= plot.style_circles

var weekColor		= color.new(DEFAULT_COLOR, DEFAULT_TRANSP)
var weekLinewidth	= 2
var weekStyle		= plot.style_cross

var monthColor		= color.new(DEFAULT_COLOR, DEFAULT_TRANSP)
var monthLinewidth	= 3
var monthStyle		= plot.style_cross

//----------------------------- Securities ----------------------------

[dayStart, dayHigh, dayLow, isLastDay] = security(syminfo.tickerid, 'D', [time, high, low, barstate.islast], lookahead = barmerge.lookahead_on)
[weekStart, weekHigh, weekLow, isLastWeek, lastTradingDayOfTheWeek] = security(syminfo.tickerid, 'W', [time, high, low, barstate.islast, time_tradingday], lookahead = barmerge.lookahead_on)
[monthStart, monthHigh, monthLow, isLastMonth] = security(syminfo.tickerid, 'M', [time, high, low, barstate.islast], lookahead = barmerge.lookahead_on)

//----------------------------- Functions -----------------------------

// Get from a given date the weekday position [1-7] ordered from Monday to Sunday
f_getWeekday(_t) => dayofweek(_t) == dayofweek.sunday ? 7 : dayofweek(_t) -1

// Get current date weekday index [0-6] ordered from Monday to Sunday
f_getWeekdayIndex() => f_getWeekday(timenow) -1

// Check if current date is on a given weekday
f_isWeekday(_weekday) => dayofweek(timenow) == _weekday

// Check if current time is within the first session of the day (e.g. EURUSD Monday 00:00-16:59)
f_isFirstSession() => hour(timenow) < hour(dayStart)

// Check if current time is within the last session of the day (e.g. EURUSD Monday 17:00-23:59)
f_isLastSession() => hour(timenow) >= hour(dayStart)
 
f_print(_txt, _x, _y) =>
	var _label = label.new(_x, _y, _txt, style=label.style_label_left, xloc=xloc.bar_time)
	if barstate.islast
		label.set_xy(_label, _x, _y)

//------------------------------- Logic -------------------------------

// The calculation for the display in a range from right to left starts at current date `timenow`
// On non 24x7 markets, there is an inherent problematic of missing bars when market are closed (holidays, weekends)
// While it isn't possible to account for holidays we can adjust the range on weekends

isMarket24x7 = f_getWeekday(lastTradingDayOfTheWeek) == 7

isOverlapingWeekend = (f_isWeekday(dayofweek.sunday) and f_isLastSession()) ? 0 : f_getWeekdayIndex() - i_dayLookback < 0

isSaturdaySession = (f_isWeekday(dayofweek.friday) and f_isLastSession()) or (f_isWeekday(dayofweek.saturday) and f_isFirstSession())

isSundaySession = (f_isWeekday(dayofweek.saturday) and f_isLastSession()) or (f_isWeekday(dayofweek.sunday) and f_isFirstSession())

// Adjustments:

// 1. If trading trading session overlaps two days (e.g. forex 17:00 - 17:00) we adjust at the first day
adjustmentForOvernightSession = f_isFirstSession() ? 1 : 0

// 2. When trading into the week we adjust at the first weekday
adjustmentForWeekStartDate = f_getWeekdayIndex()

// 3. When previous x days overlap a weekend and if market was closed we adjust at previous week last trading session
adjustmentForWeekend = 0

// 4. When current time is on a weekend, if market is closed we adjust at the last trading session
adjustmentForWeekendOverlap = 0

if not isMarket24x7
	adjustmentForWeekend 		:= isSaturdaySession ? 1 : isSundaySession ? 2 : 0
	adjustmentForWeekendOverlap := isOverlapingWeekend ? 2 : 0

dayLimitLeft = timestamp(
 year(timenow),
 month(timenow),
 dayofmonth(timenow) - adjustmentForOvernightSession - adjustmentForWeekendOverlap - adjustmentForWeekend - i_dayLookback,
 hour(dayStart),
 minute(dayStart),
 second(dayStart))

weekLimitLeft = timestamp(
 year(timenow),
 month(timenow),
 dayofmonth(timenow) - adjustmentForOvernightSession - adjustmentForWeekStartDate - adjustmentForWeekend - i_weekLookback * 7,
 hour(weekStart),
 minute(weekStart),
 second(weekStart))

monthLimitLeft = timestamp(
 year(timenow),
 month(timenow) - i_monthLookback,
 1 - adjustmentForOvernightSession,
 hour(monthStart),
 minute(monthStart),
 second(monthStart))

canShowDay		= time >= dayLimitLeft and not isLastDay and timeframe.isintraday
canShowWeek 	= time >= weekLimitLeft and not isLastWeek and not timeframe.isweekly and not timeframe.ismonthly
canShowMonth	= time >= monthLimitLeft and not isLastMonth and not timeframe.ismonthly

//------------------------- Plotting ---------------------------------

plot(canShowDay ? dayHigh : na,		title = "Day Highs",	linewidth = dayLinewidth,	color = dayColor,	style = dayStyle)
plot(canShowDay ? dayLow : na,		title = "Day Lows",		linewidth = dayLinewidth,	color = dayColor,	style = dayStyle)
plot(canShowWeek ? weekHigh : na,	title = "Week Highs",	linewidth = weekLinewidth,	color = weekColor, 	style = weekStyle)
plot(canShowWeek ? weekLow : na,	title = "Week Lows",	linewidth = weekLinewidth,	color = weekColor, 	style = weekStyle)
plot(canShowMonth ? monthHigh : na,	title = "Month Highs",	linewidth = monthLinewidth,	color = monthColor, style = monthStyle)
plot(canShowMonth ? monthLow : na,	title = "Month Lows",	linewidth = monthLinewidth,	color = monthColor, style = monthStyle)

//-------------------------- DEBUG ----------------------------------

//f_print("daily right left", dayLimitLeft, close)

plotchar(adjustmentForOvernightSession, "adjust session", "", location=location.top)
plotchar(adjustmentForWeekend, "adjust weekend", "", location=location.top)
plotchar(adjustmentForWeekendOverlap, "adjust weekend overlap", "", location=location.top)
plotchar((f_isWeekday(dayofweek.saturday) and f_isLastSession()) ? 66 : 33, "is saturday", "", location=location.top)

