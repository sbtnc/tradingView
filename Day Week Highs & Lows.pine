// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// 2020-01-12

//@version=4
study("Day Week Highs & Lows", shorttitle = "DW HL", overlay = true)

//------------------------------ Inputs ------------------------------

i_dayLookback		= input(defval = 2, minval = 0, title = "Previous Days")
i_weekLookback 		= input(defval = 1, minval = 0, title = "Previous Weeks")

//----------------------------- Constants -----------------------------

var DEFAULT_COLOR	= color.black
var DEFAULT_TRANSP	= 0

//------------------------------ Styling ------------------------------

var dayColor		= color.new(DEFAULT_COLOR, DEFAULT_TRANSP)
var dayLinewidth	= 1
var dayStyle		= plot.style_circles

var weekColor		= color.new(DEFAULT_COLOR, DEFAULT_TRANSP)
var weekLinewidth	= 2
var weekStyle		= plot.style_cross

//----------------------------- Functions -----------------------------

// `dayofweek()` returns 1: sunday, 2: monday, 3: tuesday, 4: wednesday, 5: thursday, 6: friday and 7: saturday 

// get the number of days passed since the start of the week
// `f_daysSinceWeekStart()` returns 0: monday, 1: tuesday, 2: wednesday, 3: thursday, 4: friday, 5: saturday and 6: sunday 
f_daysSinceWeekStart() => dayofweek(timenow) == dayofweek.sunday ? 6 : dayofweek(timenow) -2

// get the day of the weeky position ordered from monday to sunday
// `f_dayOfWeek()` returns 1: monday, 2: tuesday, 3: wednesday, 4: thursday, 5: friday, 6: saturday and 7: sunday 
f_dayOfWeek(_t) => dayofweek(_t) == dayofweek.sunday ? 7 : dayofweek(_t) -1

//------------------------------- Logic -------------------------------

[dayStart, dayHigh, dayLow, isLastDay] = security(syminfo.tickerid, 'D', [time, high, low, barstate.islast], lookahead = barmerge.lookahead_on)
[weekStart, weekHigh, weekLow, isLastWeek, lastWeekTradingDay] = security(syminfo.tickerid, 'W', [time, high, low, barstate.islast, time_tradingday], lookahead = barmerge.lookahead_on)

// depending on the market session
// if session 17: past 
// the whole logic for the display in range is based on current date `timenow`
// if the market is closed (e.g. on saturday for forex), the last bar's date is no more the current date which need to be adjusted
adjustment = f_dayOfWeek(timenow) > f_dayOfWeek(lastWeekTradingDay) ? f_dayOfWeek(timenow) - f_dayOfWeek(lastWeekTradingDay) : 0

dayLimitLeft = timestamp(
 year(timenow),
 month(timenow),
 dayofmonth(timenow) - i_dayLookback - adjustment,
 hour(dayStart),
 minute(dayStart),
 second(dayStart))

weekLimitLeft = timestamp(
 year(timenow),
 month(timenow),
 dayofmonth(timenow) - i_weekLookback * 7 - f_daysSinceWeekStart() - adjustment,
 hour(weekStart),
 minute(weekStart),
 second(weekStart))

canShowDay	= time >= dayLimitLeft and not isLastDay and timeframe.isintraday
canShowWeek = time >= weekLimitLeft and not isLastWeek and not timeframe.isweekly and not timeframe.ismonthly

//------------------------- Plotting ---------------------------------

plot(canShowDay ? dayHigh : na,		title = "Day Highs",	linewidth = dayLinewidth,	color = dayColor, style = dayStyle)
plot(canShowDay ? dayLow : na,		title = "Day Lows",		linewidth = dayLinewidth,	color = dayColor, style = dayStyle)
plot(canShowWeek ? weekHigh : na,	title = "Week Highs",	linewidth = weekLinewidth,	color = dayColor, style = weekStyle)
plot(canShowWeek ? weekLow : na,	title = "Week Lows",	linewidth = weekLinewidth,	color = dayColor, style = weekStyle)

//-------------------------- DEBUG ----------------------------------

plotchar(f_daysSinceWeekStart(), "days to substract...", "", location = location.top)
plotchar(dayofmonth(timenow), '...from date', "", location = location.top)
plotchar(hour(weekStart), 'at hour', "", location = location.top)
plotchar(na, '----', "", location = location.top)
plotchar(f_dayOfWeek(lastWeekTradingDay), 'Last trading day', "", location = location.top)
plotchar(f_dayOfWeek(timenow), 'Timenow', "", location = location.top)
plotchar(adjustment, 'Adjustment', "", location = location.top)

bgcolor(time >= timestamp(
 year(timenow),
 month(timenow),
 dayofmonth(timenow) - f_daysSinceWeekStart(),
 hour(weekStart),
 minute(weekStart),
 second(weekStart)) ? color.yellow : color(na))