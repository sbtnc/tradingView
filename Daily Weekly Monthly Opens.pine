// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// 2020-01-11

//@version=4
study("Daily Weekly Monthly Opens", shorttitle = "DWM O", overlay = true)

[daily_time, daily_open] = security(syminfo.tickerid, 'D', [time, open], lookahead = barmerge.lookahead_on)
[weekly_time, weekly_open] = security(syminfo.tickerid, 'W', [time, open], lookahead = barmerge.lookahead_on)
[monthly_time, monthly_open] = security(syminfo.tickerid, 'M', [time, open], lookahead = barmerge.lookahead_on)

//------------------------------ Inputs -------------------------------

var is_daily_enabled = input(defval = true, title = "Daily Open", type = input.bool)
var is_weekly_enabled = input(defval = true, title = "Weeky Open", type = input.bool)
var is_monthly_enabled = input(defval = true, title = "Monthly Open", type = input.bool)
var show_tails = input(defval = false, title = "Show Tails", type = input.bool)
var color_input = input(defval = "Gray",
   title = "Color",
   options = ["Aqua", "Black", "Blue", "Fuchsia", "Gray", "Green", "Lime", "Maroon", "Navy", "Olive", "Purple", "Red", "Silver", "Teal", "White", "Yellow"],
   type = input.string)

//------------------------------ Styling ------------------------------

var user_color = color_input == "Aqua" ? color.aqua :
   color_input == "Black" ? color.black :
   color_input == "Blue" ? color.blue :
   color_input == "Fuchsia" ? color.fuchsia :
   color_input == "Green" ? color.green :
   color_input == "Lime" ? color.lime :
   color_input == "Maroon" ? color.maroon :
   color_input == "Navy" ? color.navy :
   color_input == "Olive" ? color.olive :
   color_input == "Purple" ? color.purple :
   color_input == "Red" ? color.red :
   color_input == "Silver" ? color.silver :
   color_input == "Teal" ? color.teal :
   color_input == "White" ? color.white :
   color_input == "Yellow" ? color.yellow :
   color.gray

var DEFAULT_LINE_WIDTH = 1
var DEFAULT_TAIL_WIDTH = 1
var DEFAULT_LINE_COLOR = user_color
var DEFAULT_LABEL_COLOR = user_color
var DEFAULT_TAIL_COLOR = user_color
var DEFAULT_LABEL_SIZE = size.small
var DEFAULT_LABEL_STYLE = label.style_none
var DEFAULT_TAIL_STYLE = line.style_dotted
var DEFAULT_EXTEND_RIGHT = 20

var daily_line_color = DEFAULT_LINE_COLOR
var daily_line_width = DEFAULT_LINE_WIDTH
var daily_label_color = DEFAULT_LABEL_COLOR
var daily_label_size = DEFAULT_LABEL_SIZE
var daily_label_style = DEFAULT_LABEL_STYLE
var daily_tail_width = DEFAULT_LINE_WIDTH
var daily_tail_color = DEFAULT_TAIL_COLOR
var daily_tail_style = DEFAULT_TAIL_STYLE
var daily_extend_right = DEFAULT_EXTEND_RIGHT

var weekly_line_color = DEFAULT_LINE_COLOR
var weekly_line_width = DEFAULT_LINE_WIDTH
var weekly_label_color = DEFAULT_LABEL_COLOR
var weekly_label_size = DEFAULT_LABEL_SIZE
var weekly_label_style = DEFAULT_LABEL_STYLE
var weekly_tail_width = DEFAULT_LINE_WIDTH
var weekly_tail_color = DEFAULT_TAIL_COLOR
var weekly_tail_style = DEFAULT_TAIL_STYLE
var weekly_extend_right = DEFAULT_EXTEND_RIGHT

var monthly_line_color = DEFAULT_LINE_COLOR
var monthly_line_width = DEFAULT_LINE_WIDTH
var monthly_label_color = DEFAULT_LABEL_COLOR
var monthly_label_size = DEFAULT_LABEL_SIZE
var monthly_label_style	= DEFAULT_LABEL_STYLE
var monthly_tail_width = DEFAULT_LINE_WIDTH
var monthly_tail_color = DEFAULT_TAIL_COLOR
var monthly_tail_style = DEFAULT_TAIL_STYLE
var monthly_extend_right = DEFAULT_EXTEND_RIGHT

//------------------------------ Plotting ------------------------------

var can_show_daily = is_daily_enabled and timeframe.isintraday
var can_show_weekly = is_weekly_enabled and not timeframe.isweekly and not timeframe.ismonthly
var can_show_monthly = is_monthly_enabled and not timeframe.ismonthly

get_limit_right(bars) =>
	timenow + (time - time[1]) * bars

f_drawTail(_x1, _x2, _y, _color, _style, _width) =>
    var _line = line.new(
     x1     = _x1,
     x2     = _x2,
     y1     = _y,
     y2     = _y,
     color  = _color,
     style  = _style,
     width  = _width,
     extend = extend.left,
     xloc   = xloc.bar_time
     )

    line.set_xy1(_line, _x1, _y)
    line.set_xy2(_line, _x2, _y)
    _line

f_drawLine(_x1, _x2, _y, _color, _width) =>
    var _line = line.new(
     x1     = _x1,
     x2     = _x2,
     y1     = _y,
     y2     = _y,
     color  = _color,
     width  = _width,
     xloc   = xloc.bar_time
     )

    line.set_xy1(_line, _x1, _y)
    line.set_xy2(_line, _x2, _y)
    _line

f_drawLabel(_x, _y, _text, _textcolor, _style, _size) =>
    var _label = label.new(
     x          = _x,
     y          = _y,
     text       = _text,
     textcolor  = _textcolor,
     style      = _style,
     size       = _size,
     xloc       = xloc.bar_time
     )
    
    label.set_x(_label, _x)
    label.set_y(_label, _y)
    _label
    

// the following code doesn't need to be processed on every candle
if barstate.islast
    is_weekly_open = dayofweek == dayofweek.monday
    is_monthly_open	= dayofmonth == 1
	can_draw_daily = (is_weekly_enabled ? not is_weekly_open : true) and (is_monthly_enabled ? not is_monthly_open : true)
	can_draw_weekly = is_monthly_enabled ? not (is_monthly_open and is_weekly_open) : true

    //
    // Daily
    //

    if can_show_daily and can_draw_daily
        daily_limit_right = get_limit_right(daily_extend_right)
        
        if show_tails
            f_drawTail(time, daily_limit_right, daily_open, daily_tail_color, daily_tail_style, daily_tail_width)
        
        f_drawLine(daily_time, daily_limit_right, daily_open, daily_line_color, daily_line_width)
        f_drawLabel(daily_limit_right, daily_open, "DO    ", daily_label_color, daily_label_style, daily_label_size)

    //
    // Weekly
    //

    if can_show_weekly and can_draw_weekly
        weekly_limit_right = get_limit_right(weekly_extend_right)
        
        if show_tails
            f_drawTail(time, weekly_limit_right, weekly_open, weekly_tail_color, weekly_tail_style, weekly_tail_width)

        f_drawLine(weekly_time, weekly_limit_right, weekly_open, weekly_line_color, weekly_line_width)
        weekly_label = f_drawLabel(weekly_limit_right, weekly_open, "WO    ", weekly_label_color, weekly_label_style, weekly_label_size)

    	// the weekly open can be the daily open too (monday)
        // only the weekly will be draw, in these case we update its label
	    if is_weekly_open and can_show_daily
            label.set_text(weekly_label, "DO / WO            ")

    //
    // Monthly
    //

    if can_show_monthly
        monthly_limit_right = get_limit_right(monthly_extend_right)
        
        if show_tails
            f_drawTail(time, monthly_limit_right, monthly_open, monthly_tail_color, monthly_tail_style, monthly_tail_width)
        
        monthlyLine = f_drawLine(monthly_time, monthly_limit_right, monthly_open, monthly_line_color, monthly_line_width)
        monthlyLabel = f_drawLabel(monthly_limit_right, monthly_open, "MO    ", monthly_label_color, monthly_label_style, monthly_label_size)

        // the monthly open can be the weekly open (monday 1st) and/or daily open too
        // only the monthly will be draw, in these case we update its label
        if is_monthly_open
            if can_show_daily
                label.set_text(monthlyLabel, "DO / MO            ")
            if is_weekly_open
                if can_show_weekly
                    label.set_text(monthlyLabel, "WO / MO            ")
                if can_show_daily and can_show_weekly
                    label.set_text(monthlyLabel, "DO / WO / MO                ")

        // the start of the line is drew from the first week of the month
        // if the first day of the weekly candle (monday) is the 2nd of the month
        // we fix the start of the line position on the previous weekly candle
        if timeframe.isweekly and dayofweek(monthly_time) != dayofweek.monday
            line.set_x1(monthlyLine, monthly_time - (weekly_time - weekly_time[1]))