// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// 2020-01-11

//@version=4
study("Daily Weekly Monthly Yearly Opens", shorttitle = "DWMY O", overlay = true)

//---------------------------- Constants ------------------------------

var DEFAULT_LINE_WIDTH      = 1
var DEFAULT_TAIL_WIDTH      = 1
var DEFAULT_TAIL_STYLE      = line.style_dotted
var DEFAULT_LABEL_SIZE      = size.small
var DEFAULT_LABEL_STYLE     = label.style_none

//------------------------------ Inputs -------------------------------

var i_isDailyEnabled        = input(defval = true,          title = "Daily",        group = "Opens",    inline = "Daily")
var i_dailyColor            = input(defval = color.green,   title = "",             group = "Opens",    inline = "Daily")
var i_isWeeklyEnabled       = input(defval = true,          title = "Weekly",       group = "Opens",    inline = "Weekly")
var i_weeklyColor           = input(defval = color.orange,  title = "",             group = "Opens",    inline = "Weekly")
var i_isMonthlyEnabled      = input(defval = true,          title = "Monthly",      group = "Opens",    inline = "Monthly")
var i_monthlyColor          = input(defval = color.red,     title = "",             group = "Opens",    inline = "Monthly")
var i_isYearlyEnabled       = input(defval = true,          title = "Yearly",       group = "Opens",    inline = "Yearly")
var i_yearlyColor           = input(defval = color.yellow,  title = "",             group = "Opens",    inline = "Yearly")
var i_isTailsEnabled        = input(defval = false,         title = "Show Tails",   group = "Settings")
var i_projectionOffset      = input(defval = 20,            title = "Offset",       group = "Settings", minval = 1)

//----------------------------- Securities -----------------------------

[dailyTime, dailyOpen]      = security(syminfo.tickerid, '1440', [time, open], lookahead = barmerge.lookahead_on)
[weeklyTime, weeklyOpen]    = security(syminfo.tickerid, 'W', [time, open], lookahead = barmerge.lookahead_on)
[monthlyTime, monthlyOpen]  = security(syminfo.tickerid, 'M', [time, open], lookahead = barmerge.lookahead_on)
[yearlyTime, yearlyOpen]    = security(syminfo.tickerid, '12M', [time, open], lookahead = barmerge.lookahead_on)

//--------------------------- Function helpers -------------------------

f_drawLine(_x1, _x2, _y, _color, _width) =>
    var _line = line.new(
     x1     = _x1,
     x2     = _x2,
     y1     = _y,
     y2     = _y,
     color  = _color,
     width  = _width,
     xloc   = xloc.bar_time
     )

    line.set_xy1(_line, _x1, _y)
    line.set_xy2(_line, _x2, _y)
    _line

f_drawLabel(_x, _y, _text, _textcolor, _style, _size) =>
    var _label = label.new(
     x          = _x,
     y          = _y,
     text       = _text,
     textcolor  = _textcolor,
     style      = _style,
     size       = _size,
     xloc       = xloc.bar_time
     )
    
    label.set_xy(_label, _x, _y)
    _label

f_drawTail(_x1, _x2, _y, _color, _style, _width) =>
    var _line = line.new(
     x1     = _x1,
     x2     = _x2,
     y1     = _y,
     y2     = _y,
     color  = _color,
     style  = _style,
     width  = _width,
     extend = extend.left,
     xloc   = xloc.bar_time
     )

    line.set_xy1(_line, _x1, _y)
    line.set_xy2(_line, _x2, _y)
    _line

f_getRightOffset(_margin) =>
    _padding = 4
    _bar = min(time - time[1], time[1] - time[2])
    time + _bar * (i_projectionOffset + _margin * _padding)

//------------------------------ Plotting ------------------------------

var canShowDaily    = i_isDailyEnabled and timeframe.isintraday
var canShowWeekly   = i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly  = i_isMonthlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly)
var canShowYearly   = i_isYearlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly or (timeframe.ismonthly and timeframe.multiplier < 12))

// On the weekly timeframe, pinescript draws lines from the first weekly candle whose start date belongs to a given year/month
// E.g. if the first weekly candle of the year whose start date is the 6th of January, then the yearly open line is drawn from this candle
// In such case, we visually want it to be anchored on the previous week which start date is the 31st December instead

var int weeklyTimeOnYearChange = na
var int x1YearlyAnchor = na
var int weeklyTimeOnMonthChange = na
var int x1MonthlyAnchor = na

if timeframe.isweekly
    if yearlyTime != yearlyTime[1]
        weeklyTimeOnYearChange := weeklyTime
        x1YearlyAnchor := weeklyTime[1]
    if monthlyTime != monthlyTime[1]
        weeklyTimeOnMonthChange := weeklyTime
        x1MonthlyAnchor := weeklyTime[1]

if barstate.islast
    //
    // Yearly
    //
    if canShowYearly
        _margin = 0
        if canShowDaily and dailyOpen == yearlyOpen
            _margin := _margin + 1
        if canShowWeekly and weeklyOpen == yearlyOpen
            _margin := _margin + 1
        if canShowMonthly and monthlyOpen == yearlyOpen
            _margin := _margin + 1
        _yearlyRightOffset = f_getRightOffset(_margin)
        
        if i_isTailsEnabled
            f_drawTail(time, _yearlyRightOffset, yearlyOpen, i_yearlyColor, DEFAULT_TAIL_STYLE, DEFAULT_LINE_WIDTH)
        
        f_drawLine(time, _yearlyRightOffset, yearlyOpen, i_yearlyColor, DEFAULT_LINE_WIDTH)
        yearlyLine = f_drawLine(yearlyTime, time, yearlyOpen, i_yearlyColor, DEFAULT_LINE_WIDTH)
        f_drawLabel(_yearlyRightOffset, yearlyOpen, "Y   ", i_yearlyColor, DEFAULT_LABEL_STYLE, DEFAULT_LABEL_SIZE)

        // When the weekly candle start date is equal or greater than the 2nd day of the year, obviously the yearly open should be anchored on previous weekly candle
        // Basically, we adjust the x1 position if the weekly start date is different than the 1st day the year
        if timeframe.isweekly
            // Exception is made for overnight markets (e.g. EURUSD) as the market actually opens on prior Sunday
            if dayofweek == dayofweek.sunday
                line.set_x1(yearlyLine, x1YearlyAnchor)
            // Considering holidays as the first day of the year isn't necessarily the 1st 
            else if dayofmonth(weeklyTimeOnYearChange) != dayofmonth(yearlyTime)
                line.set_x1(yearlyLine, x1YearlyAnchor)
        
    //
    // Monthly
    //
    if canShowMonthly
        _margin = 0
        if canShowDaily and dailyOpen == monthlyOpen
            _margin := _margin + 1
        if canShowWeekly and weeklyOpen == monthlyOpen
            _margin := _margin + 1
        _monthlyRightOffset = f_getRightOffset(_margin)
        
        if i_isTailsEnabled
            f_drawTail(time, _monthlyRightOffset, monthlyOpen, i_monthlyColor, DEFAULT_TAIL_STYLE, DEFAULT_LINE_WIDTH)
        
        f_drawLine(time, _monthlyRightOffset, monthlyOpen, i_monthlyColor, DEFAULT_LINE_WIDTH)
        monthlyLine = f_drawLine(monthlyTime, time, monthlyOpen, i_monthlyColor, DEFAULT_LINE_WIDTH)
        f_drawLabel(_monthlyRightOffset, monthlyOpen, "M   ", i_monthlyColor, DEFAULT_LABEL_STYLE, DEFAULT_LABEL_SIZE)       
        
        // When the weekly candle start date is equal or greater than the 2nd day of the month, obviously the monthly open should be anchored on previous weekly candle
        // Basically, we adjust the x1 position if the weekly start date is different than the 1st day the month
        if timeframe.isweekly
            // Exception is made for overnight markets (e.g. EURUSD) as the market actually opens on prior Sunday
            if dayofweek == dayofweek.sunday
                line.set_x1(monthlyLine, x1MonthlyAnchor)
            // Considering holidays as the first day of the month isn't necessarily the 1st 
            else if dayofmonth(weeklyTimeOnMonthChange) != dayofmonth(monthlyTime)
                line.set_x1(monthlyLine, x1MonthlyAnchor)

    //
    // Weekly
    //
    if canShowWeekly
        _margin = 0
        if canShowDaily and dailyOpen == weeklyOpen
            _margin := _margin +1
        _weeklyRightOffset = f_getRightOffset(_margin)
        
        if i_isTailsEnabled
            f_drawTail(time, _weeklyRightOffset, weeklyOpen, i_weeklyColor, DEFAULT_TAIL_STYLE, DEFAULT_LINE_WIDTH)

        f_drawLine(time, _weeklyRightOffset, weeklyOpen, i_weeklyColor, DEFAULT_LINE_WIDTH)
        f_drawLine(weeklyTime, time, weeklyOpen, i_weeklyColor, DEFAULT_LINE_WIDTH)
        f_drawLabel(_weeklyRightOffset, weeklyOpen, "W   ", i_weeklyColor, DEFAULT_LABEL_STYLE, DEFAULT_LABEL_SIZE)

    //
    // Daily
    //
    if canShowDaily
        _dailyRightOffset = f_getRightOffset(0)
        
        if i_isTailsEnabled
            f_drawTail(time, _dailyRightOffset, dailyOpen, i_dailyColor, DEFAULT_TAIL_STYLE, DEFAULT_LINE_WIDTH)
        
        f_drawLine(time, _dailyRightOffset, dailyOpen, i_dailyColor, DEFAULT_LINE_WIDTH)
        f_drawLine(dailyTime, time, dailyOpen, i_dailyColor, DEFAULT_LINE_WIDTH)
        f_drawLabel(_dailyRightOffset, dailyOpen, "D   ", i_dailyColor, DEFAULT_LABEL_STYLE, DEFAULT_LABEL_SIZE)