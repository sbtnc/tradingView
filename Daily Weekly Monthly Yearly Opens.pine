// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-01-11
// Last modified: 2022-01-13
// version 6.0

// @version=5
indicator("Daily Weekly Monthly Yearly Opens", "DWMY O", true)

//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var DEFAULT_LINE_STYLE      = line.style_solid
var DEFAULT_LINE_WIDTH      = 1
var DEFAULT_TAIL_STYLE      = line.style_dotted
var DEFAULT_LABEL_SIZE      = size.small
var DEFAULT_LABEL_STYLE     = label.style_none
var DEFAULT_OFFSET_PADDING  = 4

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

t_extendedHours             = "When enabled, discover the open prices from the extended trading hours instead of regular trading hours."

var i_isDailyEnabled        = input     (true,          "Daily",                                inline="Daily",     group="Opens")
var i_dailyColor            = input     (color.green,   "",                                     inline="Daily",     group="Opens")
var i_isWeeklyEnabled       = input     (true,          "Weekly",                               inline="Weekly",    group="Opens")
var i_weeklyColor           = input     (color.orange,  "",                                     inline="Weekly",    group="Opens")
var i_isMonthlyEnabled      = input     (true,          "Monthly",                              inline="Monthly",   group="Opens")
var i_monthlyColor          = input     (color.red,     "",                                     inline="Monthly",   group="Opens")
var i_isYearlyEnabled       = input     (true,          "Yearly",                               inline="Yearly",    group="Opens")
var i_yearlyColor           = input     (color.blue,    "",                                     inline="Yearly",    group="Opens")
var i_isTailsEnabled        = input     (false,         "Show Tails",                                               group="Settings")
var i_projectionOffset      = input.int (20,            "Offset", 1,                                                group="Settings")
var i_extendedHours         = input     (true,          "Extended Hours",   t_extendedHours,                        group="Settings")

//--------------------------------------------------------------------
//                          Functions helpers
//--------------------------------------------------------------------

f_drawLine(_x1, _x2, _y, _color, _style, _width, _xloc, _extend=extend.none) =>
    var _line = line.new(_x1, _y, _x2, _y, _xloc, _extend, _color, _style, _width)

    line.set_xy1(_line, _x1, _y)
    line.set_xy2(_line, _x2, _y)

f_drawLabel(_x, _y, _text, _textcolor, _style, _size) =>
    _priceStr = str.tostring(_y, format.mintick)

    var _label = label.new(_x, _y, _text, style=_style, textcolor=_textcolor, size=_size, tooltip=_priceStr)
    
    label.set_xy(_label, _x, _y)
    label.set_tooltip(_label, _priceStr)

f_drawOpen(_time, _open, _rightOffset, _color, _text) =>
    if i_isTailsEnabled
        f_drawLine(_time, _time + 1, _open, _color, DEFAULT_TAIL_STYLE, DEFAULT_LINE_WIDTH, xloc.bar_time, extend.left)

    f_drawLine(_time, time, _open, _color, DEFAULT_LINE_STYLE, DEFAULT_LINE_WIDTH, xloc.bar_time)

    // Plots line and label that projects in the future using xloc.bar_index for non 24x7 markets
    f_drawLine(bar_index, _rightOffset, _open, _color, DEFAULT_LINE_STYLE, DEFAULT_LINE_WIDTH, xloc.bar_index)
    f_drawLabel(_rightOffset, _open, _text, _color, DEFAULT_LABEL_STYLE, DEFAULT_LABEL_SIZE)

f_getRightOffset(_margin) =>
    bar_index + i_projectionOffset + _margin * DEFAULT_OFFSET_PADDING

//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

[dailyTime, dailyOpen, isLastDaily]         = request.security(syminfo.tickerid, timeframe.isintraday ? '1440' : 'D', [time, open, barstate.islast], lookahead = barmerge.lookahead_on)
[weeklyTime, weeklyOpen, isLastWeekly]      = request.security(syminfo.tickerid, 'W', [time, open, barstate.islast], lookahead = barmerge.lookahead_on)
[monthlyTime, monthlyOpen, isLastMonthly]   = request.security(syminfo.tickerid, 'M', [time, open, barstate.islast], lookahead = barmerge.lookahead_on)
[yearlyTime, yearlyOpen, isLastYearly]      = request.security(syminfo.tickerid, '12M', [time, open, barstate.islast], lookahead = barmerge.lookahead_on)

var canShowDaily    = i_isDailyEnabled and timeframe.isintraday
var canShowWeekly   = i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly  = i_isMonthlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly)
var canShowYearly   = i_isYearlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly or (timeframe.ismonthly and timeframe.multiplier < 12))

//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

_weeklyOpen     = weeklyOpen
_weeklyTime     = weeklyTime
_monthlyOpen    = monthlyOpen
_monthlyTime    = monthlyTime
_yearlyOpen     = yearlyOpen
_yearlyTime     = yearlyTime

// Markets with extended sessions (e.g. TSLA) are available for intradays charts only
// As the yearly, monthly and weekly data come respectively from the 12M, 1M, 1W timeframes, extended hours are excluded
// When the chart option "ext" is toggled on, open prices and times don't match
// In such case, we visually want to use the extended hours opens and times

if i_extendedHours and syminfo.session == session.extended
    var float _extWeeklyOpen   = na
    var float _extMonthlyOpen  = na
    var float _extYearlyOpen   = na
    var int _extWeeklyTime     = na
    var int _extMonthlyTime    = na
    var int _extYearlyTime     = na

    if timeframe.isintraday
        if weekofyear != weekofyear[1]
            _extWeeklyOpen := dailyOpen
            _extWeeklyTime := dailyTime
        if month != month[1]
            _extMonthlyOpen := dailyOpen
            _extMonthlyTime := dailyTime
        if year != year[1]
            _extYearlyOpen := dailyOpen
            _extYearlyTime := dailyTime

        _weeklyOpen     := _extWeeklyOpen
        _weeklyTime     := _extWeeklyTime
        _monthlyOpen    := _extMonthlyOpen
        _monthlyTime    := _extMonthlyTime
        _yearlyOpen     := _extYearlyOpen
        _yearlyTime     := _extYearlyTime

// On the weekly timeframe, Pine Script draws lines from the first weekly candle whose start date belongs to a given month/year
// E.g. if the first weekly candle of the month whose start date is the 3rd of Feb, then the monthly open line is drawn from this candle
// In such case, we visually want it to be anchored on the previous week which contains the 1st Feb

var int weeklyTimeOnYearChange  = na
var int x1YearlyAnchor          = na
var int weeklyTimeOnMonthChange = na
var int x1MonthlyAnchor         = na

if timeframe.isweekly
    if yearlyTime != yearlyTime[1]
        weeklyTimeOnYearChange := weeklyTime
        x1YearlyAnchor := weeklyTime[1]
    if monthlyTime != monthlyTime[1]
        weeklyTimeOnMonthChange := weeklyTime
        x1MonthlyAnchor := weeklyTime[1]

    // Theorically we would adjust the position if the weekly start date is different than the 1st
    // Which pratically result actually of the first day of the month/year considering holidays
    if dayofmonth(weeklyTimeOnYearChange) != dayofmonth(_yearlyTime)
        _yearlyTime := x1YearlyAnchor
    if dayofmonth(weeklyTimeOnMonthChange) != dayofmonth(_monthlyTime)
        _monthlyTime := x1MonthlyAnchor

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if barstate.islast
    //
    // Yearly
    //
    if canShowYearly
        _margin = 0
        if canShowDaily and dailyOpen == _yearlyOpen
            _margin += 1
        if canShowWeekly and _weeklyOpen == _yearlyOpen
            _margin += 1
        if canShowMonthly and _monthlyOpen == _yearlyOpen
            _margin += 1
        _rightOffset = f_getRightOffset(_margin)
        
        f_drawOpen(_yearlyTime, _yearlyOpen, _rightOffset, i_yearlyColor, "Y   ")

    //
    // Monthly
    //
    if canShowMonthly
        _margin = 0
        if canShowDaily and dailyOpen == _monthlyOpen
            _margin += 1
        if canShowWeekly and _weeklyOpen == _monthlyOpen
            _margin += 1
        _rightOffset = f_getRightOffset(_margin)

        f_drawOpen(_monthlyTime, _monthlyOpen, _rightOffset, i_monthlyColor, "M   ")

    //
    // Weekly
    //
    if canShowWeekly
        _margin = 0
        if canShowDaily and dailyOpen == _weeklyOpen
            _margin += 1
        _rightOffset = f_getRightOffset(_margin)
        
        f_drawOpen(_weeklyTime, _weeklyOpen, _rightOffset, i_weeklyColor, "W   ")
            
    //
    // Daily
    //
    if canShowDaily
        _rightOffset = f_getRightOffset(0)

        f_drawOpen(dailyTime, dailyOpen, _rightOffset, i_dailyColor, "D   ")
        
// Plot invisible opens for displaying last values in `status line`, `scale`, `data window` as well for alerting
plot(isLastDaily ? dailyOpen : na,      "D",    color.new(i_dailyColor, 100),   editable=false)
plot(isLastWeekly ? weeklyOpen : na,    "W",    color.new(i_weeklyColor, 100),  editable=false)
plot(isLastMonthly ? monthlyOpen : na,  "M",    color.new(i_monthlyColor, 100), editable=false)
plot(isLastYearly ? yearlyOpen : na,    "Y",    color.new(i_yearlyColor, 100),  editable=false)