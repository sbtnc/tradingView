// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-01-11
// Last modified: 2022-02-04
// version 6.0

// @version=5
indicator("Daily Weekly Monthly Yearly Opens", "DWMY O", true, max_lines_count=500)

//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var HEAD_PADDING        = -2
var HEAD_TRANSP         = 60
var LABEL_SIZE          = size.small
var LABEL_STYLE         = label.style_none
var LINE_STYLE          = line.style_solid
var LINE_WIDTH          = 1
var OFFSET_PADDING      = 4
var TAIL_STYLE          = line.style_dotted

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

t_tails                 = "Extends current opens on historical bars."
t_heads                 = "Extends previous opens in the future."
t_discoverPrices        = "When enabled, discover the opening prices from the intraday chart.\n\nYou may use this setting when there are discrepancies between the data from intraday and high time frames."
t_extendedHours         = "When enabled, discover the opening prices from the extended trading hours if available."

var i_isDailyEnabled    = input     (true,          "Daily",                                inline="Daily",     group="Opens")
var i_dailyColor        = input     (color.green,   "",                                     inline="Daily",     group="Opens")
var i_dailyLookback     = input.int (1,             "", 1,                                  inline="Daily",     group="Opens")
var i_isWeeklyEnabled   = input     (true,          "Weekly",                               inline="Weekly",    group="Opens")
var i_weeklyColor       = input     (color.orange,  "",                                     inline="Weekly",    group="Opens")
var i_weeklyLookback    = input.int (1,             "", 1,                                  inline="Weekly",    group="Opens")
var i_isMonthlyEnabled  = input     (true,          "Monthly",                              inline="Monthly",   group="Opens")
var i_monthlyColor      = input     (color.red,     "",                                     inline="Monthly",   group="Opens")
var i_monthlyLookback   = input.int (1,             "", 1,                                  inline="Monthly",   group="Opens")
var i_isYearlyEnabled   = input     (true,          "Yearly",                               inline="Yearly",    group="Opens")
var i_yearlyColor       = input     (color.blue,    "",                                     inline="Yearly",    group="Opens")
var i_yearlyLookback    = input.int (1,             "", 1,                                  inline="Yearly",    group="Opens")
var i_rightOffset       = input.int (20,            "Offset", 1,                                                group="Style")
var i_areTailsEnabled   = input     (false,         "Show Tails",       t_tails,                                group="Style")
var i_areHeadsEnabled   = input     (false,         "Show Projections", t_heads,                                group="Style")
var i_discoverPrices    = input     (false,         "Discover Prices",  t_discoverPrices,                       group="Settings")
var i_extendedHours     = input     (false,         "Extended Hours",   t_extendedHours,                        group="Settings")

//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var a_lastOpens             = array.new_float(4)
var canShowDaily            = i_isDailyEnabled and timeframe.isintraday
var canShowWeekly           = i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly          = i_isMonthlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly)
var canShowYearly           = i_isYearlyEnabled and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly or (timeframe.ismonthly and timeframe.multiplier < 12))
var hasExtendedHours        = i_extendedHours and syminfo.session == session.extended
var discoverPrices          = i_discoverPrices or hasExtendedHours

[dailyTime, dailyOpen]      = request.security(syminfo.tickerid, 'D',   [time, open], lookahead=barmerge.lookahead_on)
[weeklyTime, weeklyOpen]    = request.security(syminfo.tickerid, 'W',   [time, open], lookahead=barmerge.lookahead_on)
[monthlyTime, monthlyOpen]  = request.security(syminfo.tickerid, 'M',   [time, open], lookahead=barmerge.lookahead_on)
[yearlyTime, yearlyOpen]    = request.security(syminfo.tickerid, '12M', [time, open], lookahead=barmerge.lookahead_on)

hasDailyTimeChanged         = hasExtendedHours ? time_tradingday != time_tradingday[1] : dailyTime != dailyTime[1]
hasWeekklyTimeChanged       = hasExtendedHours ? weekofyear != weekofyear[1] : weeklyTime != weeklyTime[1]
hasMonthlyTimeChanged       = hasExtendedHours ? month != month[1] : monthlyTime != monthlyTime[1]
hasYearlyTimeChanged        = hasExtendedHours ? year != year[1] : yearlyTime != yearlyTime[1]

//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_getPadding(_idx) =>
    _padding = 0
    // Weekly, monthly, and yearly
    if _idx > 0 and canShowDaily and array.get(a_lastOpens, 0) == array.get(a_lastOpens, _idx)
        _padding += 1
    // Monthly and yearly
    if _idx > 1 and canShowWeekly and array.get(a_lastOpens, 1) == array.get(a_lastOpens, _idx)
        _padding += 1
    // Yearly
    if _idx > 2 and canShowMonthly and array.get(a_lastOpens, 2) == array.get(a_lastOpens, _idx)
        _padding += 1
    _padding

f_getRightBarIndex(_padding) => bar_index + i_rightOffset + _padding * OFFSET_PADDING

// On the weekly time frame, the monthly/yearly open is drawn from the first candle of the month/year
// The first weekly candle is not necessarily containing the first day of the month
// In such case, we visually anchor the open of the previous weekly candle
f_isContainedOnPrevWeekly(_time) => timeframe.isweekly and dayofmonth(time) > dayofmonth(_time)

// Creates lines for all opens
f_drawBodies(_newOpen, _x1, _x2, _y, _lookback, _color) => 
    var line _line = na 
    var _lines = array.new_line()
    if _newOpen
        line.set_x2(_line, bar_index)
        _line := line.new(_x1, _y, _x2, _y, color=_color, style=LINE_STYLE, width=LINE_WIDTH)
        array.push(_lines, _line)
        if array.size(_lines) > _lookback
            line.delete(array.shift(_lines))
    if barstate.islast
        line.set_x2(_line, _x2)

// Creates lines over the recent price action for observing how the market is reacting/will react to the price of the previous opens
f_drawHeads(_newOpen, _x1, _y, _lookback, _color) =>
    var _lines = array.new_line()
    if _newOpen
        array.push(_lines, line.new(_x1, _y, _x1, _y, color=color.new(_color, HEAD_TRANSP), style=LINE_STYLE, width=LINE_WIDTH))
        if array.size(_lines) > _lookback
            line.delete(array.shift(_lines))
    if barstate.islast
        for i = 0 to array.size(_lines) > 1 ? array.size(_lines) - 2 : 0
            // Avoid projecting on existing last opens body lines
            if not array.includes(a_lastOpens, line.get_y1(array.get(_lines, i)))
                line.set_x2(array.get(_lines, i), f_getRightBarIndex(HEAD_PADDING))

// Creates a line on historical bars for observing how the market have been reacting to the price of the current open
f_drawTail(_newOpen, _x, _y, _color) =>
    var _line = line.new(na, na, na, na, color=_color, style=TAIL_STYLE, width=LINE_WIDTH, extend=extend.left)
    if _newOpen
        line.set_xy1(_line, _x - 1, _y)
        line.set_xy2(_line, _x, _y)

f_drawLabel(_newOpen, _x, _y, _text, _color) =>
    var _label = label.new(na, na, _text, style=LABEL_STYLE, textcolor=_color, size=LABEL_SIZE)
    if _newOpen
        label.set_xy(_label, _x, _y)
        label.set_tooltip(_label, str.tostring(_y, format.mintick))    
    if barstate.islast
        label.set_x(_label, _x)

f_draw(_condition, _y, _lookback, _color, _padding, _text, _prevTime=false) =>
    _start = _prevTime ? bar_index - 1 : bar_index
    _end = f_getRightBarIndex(_padding)
    f_drawBodies(_condition, _start, _end, _y, _lookback, _color)
    f_drawLabel(_condition, _end, _y, _text, _color)
    if i_areTailsEnabled
        f_drawTail(_condition, _start, _y, _color)
    if i_areHeadsEnabled
        f_drawHeads(_condition, bar_index, _y, _lookback, _color)

//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

if hasDailyTimeChanged
    array.set(a_lastOpens, 0, discoverPrices ? open : dailyOpen)

if hasWeekklyTimeChanged
    array.set(a_lastOpens, 1, discoverPrices ? open : weeklyOpen)

if hasMonthlyTimeChanged
    array.set(a_lastOpens, 2, discoverPrices ? open : monthlyOpen)

if hasYearlyTimeChanged
    array.set(a_lastOpens, 3, discoverPrices ? open : yearlyOpen)

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

// Draw opens on the chart

if canShowYearly
    f_draw(hasYearlyTimeChanged, array.get(a_lastOpens, 3), i_yearlyLookback, i_yearlyColor, f_getPadding(3), "Y   ", f_isContainedOnPrevWeekly(yearlyTime))

if canShowMonthly
    f_draw(hasMonthlyTimeChanged, array.get(a_lastOpens, 2), i_monthlyLookback, i_monthlyColor, f_getPadding(2), "M   ", f_isContainedOnPrevWeekly(monthlyTime))

if canShowWeekly
    f_draw(hasWeekklyTimeChanged, array.get(a_lastOpens, 1), i_weeklyLookback, i_weeklyColor, f_getPadding(1), "W   ")

if canShowDaily
    f_draw(hasDailyTimeChanged, array.get(a_lastOpens, 0), i_dailyLookback, i_dailyColor, 0, "D   ")

// Plot invisible opens for displaying last values in `status line`, `scale`, `data window` as well for providing defaults alert conditions

plot(canShowDaily   ? array.get(a_lastOpens, 0) : na,   "D",    color.new(i_dailyColor, 100),   editable=false)
plot(canShowWeekly  ? array.get(a_lastOpens, 1) : na,   "W",    color.new(i_weeklyColor, 100),  editable=false)
plot(canShowMonthly ? array.get(a_lastOpens, 2) : na,   "M",    color.new(i_monthlyColor, 100), editable=false)
plot(canShowYearly  ? array.get(a_lastOpens, 3) : na,   "Y",    color.new(i_yearlyColor, 100),  editable=false)