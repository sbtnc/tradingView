// Â© sbtnc
// Created: 2024-03-10
// Last modified: 2024-03-10
// Version 1.0

// @version=5

indicator("Multi-Timeframe Separators", "MTF Separators [timestamp]", overlay = true, max_lines_count = 500)



//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

color   COLOR_1 = color.green
color   COLOR_2 = color.orange
color   COLOR_3 = color.red
color   COLOR_4 = color.blue

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

opt1  = "5S"
opt2  = "10S"
opt3  = "15S"
opt4  = "30S"
opt5  = "1"
opt6  = "2"
opt7  = "3"
opt8  = "5"
opt9  = "10"
opt10 = "15"
opt11 = "30"
opt12 = "45"
opt13 = "60"
opt14 = "120"
opt15 = "180"
opt16 = "240"
opt17 = "360"
opt18 = "480"
opt19 = "720"
opt20 = "1D"
opt21 = "1W"
opt22 = "1M"
opt23 = "3M"
opt24 = "6M"
opt25 = "12M"

g1 = "Separators"

enableSeparatorInput1       = input.bool    (true,      "",             group = g1, inline = "#1")
separatorTimeframeInput1    = input.string  ("1D",      "",             group = g1, inline = "#1", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24, opt25])
separatorLookbackInput1     = input.int     (500,       "",             group = g1, inline = "#1", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput2       = input.bool    (true,      "",             group = g1, inline = "#2")
separatorTimeframeInput2    = input.string  ("1W",      "",             group = g1, inline = "#2", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24, opt25])
separatorLookbackInput2     = input.int     (500,       "",             group = g1, inline = "#2", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput3       = input.bool    (true,      "",             group = g1, inline = "#3")
separatorTimeframeInput3    = input.string  ("1M",      "",             group = g1, inline = "#3", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24, opt25])
separatorLookbackInput3     = input.int     (500,       "",             group = g1, inline = "#3", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput4       = input.bool    (false,     "",             group = g1, inline = "#4")
separatorTimeframeInput4    = input.string  ("12M",     "",             group = g1, inline = "#4", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24, opt25])
separatorLookbackInput4     = input.int     (500,       "",             group = g1, inline = "#4", minval = 1, maxval = 500, display = display.none)

g2 = "Style"

separatorColorInput1        = input.color   (COLOR_1,   "",             group = g2, inline = "#1")
separatorWidthInput1        = input.int     (1,         "",             group = g2, inline = "#1", minval = 1, display = display.none)
separatorStyleInput1        = input.string  ("Dotted",  "",             group = g2, inline = "#1", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput2        = input.color   (COLOR_2,   "",             group = g2, inline = "#2")
separatorWidthInput2        = input.int     (1,         "",             group = g2, inline = "#2", minval = 1, display = display.none)
separatorStyleInput2        = input.string  ("Solid",   "",             group = g2, inline = "#2", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput3        = input.color   (COLOR_3,   "",             group = g2, inline = "#3")
separatorWidthInput3        = input.int     (2,         "",             group = g2, inline = "#3", minval = 1, display = display.none)
separatorStyleInput3        = input.string  ("Solid",   "",             group = g2, inline = "#3", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput4        = input.color   (COLOR_4,   "",             group = g2, inline = "#4")
separatorWidthInput4        = input.int     (3,         "",             group = g2, inline = "#4", minval = 1, display = display.none)
separatorStyleInput4        = input.string  ("Solid",   "",             group = g2, inline = "#4", options =["Solid", "Dashed", "Dotted"], display = display.none)

g3 = "Preferences"

showNextSeparatorInput      = input.bool    (false,     "Show Next",    group = g3)
useTimeInsteadOfTimeframe   = input.bool    (true,      "Use Time",     group = g3)

//#endregion


//--------------------------------------------------------------------
//#region                         Types 
//--------------------------------------------------------------------
//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Get the line style from a given input setting
// @returns  const string
getLineStyle(string input) =>
    var _style = switch input
        "Solid"     => line.style_solid
        "Dotted"    => line.style_dotted
        "Dashed"    => line.style_dashed


// @function
// @returns 
getTimestampHour(int multiplier, int prevT = time) =>
    // Si je genere Ã  partir de 00:00 -> time
    timestamp(year(prevT), month(prevT), dayofmonth(prevT), hour(prevT) + 1 * multiplier, 0, 0)


// @function
// @returns 
getTimestampDay(int multiplier, int prevT = time) =>
    // Si je passe 'hour' and 'minute' -> timeframe
    timestamp(year(prevT), month(prevT), dayofmonth(prevT) +1 * multiplier, 0, 0, 0)


// @function
// @returns 
hourChange(int multiplier = 1) =>
    var _time = getTimestampHour(multiplier)
    bool _change = false
    bool _passed = time >= _time
    bool _include = not _passed and _time < time_close

    if _passed or _include
        _time := _passed ? getTimestampHour(multiplier) : getTimestampHour(multiplier, _time)
        _change := true

        // DEBUG
        _text = str.format("{0}\n{1}\n\nðŸ”„\n{2}", _passed ? "passed" : "include", str.format_time(_time[1], "yyyy-MM-dd HH:mm"), str.format_time(_time, "yyyy-MM-dd HH:mm"))
        _color = _passed ? color.blue : color.orange
        label.new(bar_index, low, _text, color = _color, style = label.style_label_up)

    _change


// @function
// @returns 
dayChange(int multiplier = 1) =>
    var _time = getTimestampDay(multiplier)
    bool _change = false
    bool _passed = time >= _time
    bool _include = not _passed and _time < time_close

    if _passed or _include
        _time := _passed ? getTimestampDay(multiplier) : getTimestampDay(multiplier, _time)
        _change := true

        // DEBUG
        _text = str.format("{0}\n{1}\n\nðŸ”„\n{2}", _passed ? "passed" : "include", str.format_time(_time[1], "yyyy-MM-dd HH:mm"), str.format_time(_time, "yyyy-MM-dd HH:mm"))
        _color = _passed ? color.blue : color.orange
        label.new(bar_index, low, _text, color = _color, style = label.style_label_up)

    _change


timeChange(string tf) =>
    switch
        not useTimeInsteadOfTimeframe =>  timeframe.change(tf)
        //tf == "5S"      =>
        //tf == "10S"     =>
        //tf == "15S"     =>
        //tf == "30S"     =>
        //tf == "1"       => 
        //tf == "2"       =>
        //tf == "3"       =>
        //tf == "5"       =>
        //tf == "10"      =>
        //tf == "15"      =>
        //tf == "30"      =>
        //tf == "45"      =>
        tf == "60"      => hourChange()
        tf == "120"     => hourChange(2)
        tf == "180"     => hourChange(3)
        tf == "240"     => hourChange(4)
        tf == "360"     => hourChange(6)
        tf == "480"     => hourChange(8)
        tf == "720"     => hourChange(12)
        tf == "1D"      => dayChange()
        tf == "1W"      => dayChange(7) // can't know which day of the week it start
        //tf == "1M"      => 
        //tf == "3M"      =>
        //tf == "6M"      =>
        //tf == "12M"     => 


drawSeparator(bool isEnabled, string tf, color color, int width, string style, int lookback) =>
    var lineArray = array.new_line()
    _canDisplayOnChartTimeframe = timeframe.in_seconds(tf) > timeframe.in_seconds()

    if isEnabled and _canDisplayOnChartTimeframe and timeChange(tf)
        // y1 and y2 should not be equal prices otherwise draw vertical lines
        lineArray.push(
             line.new(time, open, time, open + syminfo.mintick, xloc.bar_time, extend.both, color, getLineStyle(style), width)
             )

        if lineArray.size() > lookback
            line.delete(lineArray.shift())

        // Projection
        if showNextSeparatorInput
            var line projectionLine = line.new(na, na, na, na, xloc.bar_time, extend.both, color, getLineStyle(style), width)

            nextTime = time + timeframe.in_seconds(tf) * 1000
            //log.info("\n {0}", timeframe.in_seconds(tf))
            //log.info(
            //     "\n time {0}" +
            //     "\n next time {1}",
            //     str.format_time(time),
            //     str.format_time(nextTime)
            //     )
            projectionLine.set_xy1(nextTime, open)
            projectionLine.set_xy2(nextTime, syminfo.mintick)

//#endregion


//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------
//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------
//#endregion


//--------------------------------------------------------------------
//#region                        Visuals
//--------------------------------------------------------------------

drawSeparator(enableSeparatorInput1, separatorTimeframeInput1, separatorColorInput1, separatorWidthInput1, separatorStyleInput1, separatorLookbackInput1)
//drawSeparator(enableSeparatorInput2, separatorTimeframeInput2, separatorColorInput2, separatorWidthInput2, separatorStyleInput2, separatorLookbackInput2)
//drawSeparator(enableSeparatorInput3, separatorTimeframeInput3, separatorColorInput3, separatorWidthInput3, separatorStyleInput3, separatorLookbackInput3)
//drawSeparator(enableSeparatorInput4, separatorTimeframeInput4, separatorColorInput4, separatorWidthInput4, separatorStyleInput4, separatorLookbackInput4)

//#endregion


//--------------------------------------------------------------------
//#region                         Alerts
//--------------------------------------------------------------------
//#endregion


//--------------------------------------------------------------------
//#region                         Debug
//--------------------------------------------------------------------
//#endregion


//--------------------------------------------------------------------
//#region                      Performances
//--------------------------------------------------------------------
//#endregion