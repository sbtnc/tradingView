// Â© sbtnc
// Created: 2024-03-10
// Last modified: 2024-10-12
// Version 1.0

// @version=5
indicator("Multi-Timeframe Separators", "MTF Separators", overlay = true, max_lines_count = 500)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

color COLOR_1 = color.green
color COLOR_2 = color.orange
color COLOR_3 = color.red
color COLOR_4 = color.blue

//#endregion


//--------------------------------------------------------------------
//#region                         Types 
//--------------------------------------------------------------------

//@enum
enum Timeframes
    o1  = "5 seconds"
    o2  = "10 seconds"
    o3  = "15 seconds"
    o4  = "30 seconds"
    o5  = "1 minute"
    o6  = "2 minutes"
    o7  = "3 minutes"
    o8  = "5 minutes"
    o9  = "10 minutes"
    o10 = "15 minutes"
    o11 = "30 minutes"
    o12 = "1 hour"
    o13 = "2 hours"
    o14 = "3 hours"
    o15 = "4 hours"
    o16 = "6 hours"
    o17 = "8 hours"
    o18 = "12 hours"
    o19 = "1 day"
    o20 = "1 week"
    o21 = "1 month"
    o22 = "3 months"
    o23 = "6 months"
    o24 = "12 months"

//@enum
enum Timezones
    utc     = "UTC"
    exch    = "Exchange"
    cai     = "Africa/Cairo"
    jnb     = "Africa/Johannesburg"
    los     = "Africa/Lagos"
    nbo     = "Africa/Nairobi"
    tun     = "Africa/Tunis"
    bue     = "America/Argentina/Buenos_Aires"
    bog     = "America/Bogota"
    ccs     = "America/Caracas"
    chi     = "America/Chicago"
    den     = "America/Denver"
    esr     = "America/El_Salvador"
    jnu     = "America/Juneau"
    lim     = "America/Lima"
    lax     = "America/Los_Angeles"
    nyc     = "America/New_York"
    mex     = "America/Mexico_City"
    phx     = "America/Phoenix"
    scl     = "America/Santiago"
    sao     = "America/Sao_Paulo"
    yto     = "America/Toronto"
    yvr     = "America/Vancouver"
    ala     = "Asia/Almaty"
    asb     = "Asia/Ashgabat"
    bah     = "Asia/Bahrain"
    bkk     = "Asia/Bangkok"
    dxb     = "Asia/Dubai"
    ckg     = "Asia/Chongqing"
    cmb     = "Asia/Colombo"
    sgn     = "Asia/Ho_Chi_Minh"
    hkg     = "Asia/Hong_Kong"
    ist     = "Asia/Istanbul"
    jkt     = "Asia/Jakarta"
    jrs     = "Asia/Jerusalem"
    khi     = "Asia/Karachi"
    ktm     = "Asia/Kathmandu"
    ccu     = "Asia/Kolkata"
    kwi     = "Asia/Kuwait"
    mnl     = "Asia/Manila"
    mct     = "Asia/Muscat"
    nic     = "Asia/Nicosia"
    doh     = "Asia/Qatar"
    ruh     = "Asia/Riyadh"
    sel     = "Asia/Seoul"
    sha     = "Asia/Shanghai"
    sin     = "Asia/Singapore"
    tpe     = "Asia/Taipei"
    thr     = "Asia/Tehran"
    tyo     = "Asia/Tokyo"
    rgn     = "Asia/Yangon"
    rek     = "Atlantic/Reykjavik"
    adl     = "Australia/Adelaide"
    bne     = "Australia/Brisbane"
    per     = "Australia/Perth"
    syd     = "Australia/Sydney"
    ams     = "Europe/Amsterdam"
    ath     = "Europe/Athens"
    beg     = "Europe/Belgrade"
    ber     = "Europe/Berlin"
    bts     = "Europe/Bratislava"
    bru     = "Europe/Brussels"
    buh     = "Europe/Bucharest"
    bud     = "Europe/Budapest"
    cph     = "Europe/Copenhagen"
    dub     = "Europe/Dublin"
    hel     = "Europe/Helsinki"
    mad     = "Europe/Madrid"
    mla     = "Europe/Malta"
    mow     = "Europe/Moscow"
    lis     = "Europe/Lisbon"
    lon     = "Europe/London"
    lux     = "Europe/Luxembourg"
    osl     = "Europe/Oslo"
    par     = "Europe/Paris"
    rix     = "Europe/Riga"
    rom     = "Europe/Rome"
    sto     = "Europe/Stockholm"
    tll     = "Europe/Tallinn"
    vno     = "Europe/Vilnius"
    waw     = "Europe/Warsaw"
    zrh     = "Europe/Zurich"
    akl     = "Pacific/Auckland"
    cht     = "Pacific/Chatham"
    fko     = "Pacific/Fakaofo"
    hnl     = "Pacific/Honolulu"
    nlk     = "Pacific/Norfolk"

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

string g1 = "Separators"

enableSeparatorInput1       = input.bool    (true,              title = "", group = g1, inline = "#1")
separatorTimeframeInput1    = input.enum    (Timeframes.o19,    title = "", group = g1, inline = "#1")
separatorLookbackInput1     = input.int     (50,                title = "", group = g1, inline = "#1", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput2       = input.bool    (true,              title = "", group = g1, inline = "#2")
separatorTimeframeInput2    = input.enum    (Timeframes.o20,    title = "", group = g1, inline = "#2")
separatorLookbackInput2     = input.int     (50,                title = "", group = g1, inline = "#2", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput3       = input.bool    (true,              title = "", group = g1, inline = "#3")
separatorTimeframeInput3    = input.enum    (Timeframes.o21,    title = "", group = g1, inline = "#3")
separatorLookbackInput3     = input.int     (50,                title = "", group = g1, inline = "#3", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput4       = input.bool    (false,             title = "", group = g1, inline = "#4")
separatorTimeframeInput4    = input.enum    (Timeframes.o24,    title = "", group = g1, inline = "#4")
separatorLookbackInput4     = input.int     (50,                title = "", group = g1, inline = "#4", minval = 1, maxval = 500, display = display.none)

string g2 = "Style"

separatorColorInput1        = input.color   (COLOR_1,           title = "", group = g2, inline = "#1")
separatorWidthInput1        = input.int     (3,                 title = "", group = g2, inline = "#1", minval = 1, display = display.none)
separatorStyleInput1        = input.string  ("Dotted",          title = "", group = g2, inline = "#1", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput2        = input.color   (COLOR_2,           title = "", group = g2, inline = "#2")
separatorWidthInput2        = input.int     (1,                 title = "", group = g2, inline = "#2", minval = 1, display = display.none)
separatorStyleInput2        = input.string  ("Solid",           title = "", group = g2, inline = "#2", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput3        = input.color   (COLOR_3,           title = "", group = g2, inline = "#3")
separatorWidthInput3        = input.int     (2,                 title = "", group = g2, inline = "#3", minval = 1, display = display.none)
separatorStyleInput3        = input.string  ("Solid",           title = "", group = g2, inline = "#3", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput4        = input.color   (COLOR_4,           title = "", group = g2, inline = "#4")
separatorWidthInput4        = input.int     (3,                 title = "", group = g2, inline = "#4", minval = 1, display = display.none)
separatorStyleInput4        = input.string  ("Solid",           title = "", group = g2, inline = "#4", options =["Solid", "Dashed", "Dotted"], display = display.none)

string g3               = "Preferences"
string refOpt1          = "Session Time"
string refOpt2          = "Day Time"
string referenceTooltip = "By default, the indicator uses the start of the trading session as a point of reference. " +
                         "See \"Security Info\" for more details.\n\n" + 
                         "In some markets, when the start of the trading session differs from the start of the day, " +
                         "you can use the \"Day Time\" option to prefer 00:00 instead.\n\n" +
                         "For example, the trading session on S&P500 is from 09:30 to 16:10 New York time. " +
                         "Drawing 2 hours separators produces for \"Session Time\" the intervals [09:30, 11:30, 13:30, 15:30] " +
                         "like the bars seen on the 2h chart, or for \"Day Time\" the intervals [10:00, 12:00, 14:00, 16:00]."       
string timezoneTooltip  = "By default, the indicator uses the exchange timezone. See \"Security Info\" for more details.\n\n" +
                         "When using the \"Day Time\" option as a reference, you can choose a particular timezone to determine the start of the day.\n\n" +
                         "Note: this implies looking at minutes data and might reduce the number of separators on higher timeframes charts."

referenceInput              = input.string  (refOpt1,               "Reference", group = g3, tooltip = referenceTooltip, options = [refOpt2, refOpt1])
timezoneInput               = input.enum    (Timezones.exch,        "Timezone",  group = g3, tooltip = timezoneTooltip, display = display.none)

//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Produce the `timeframe` parameter from the given user string input.
// @returns  string
method param(simple Timeframes input) =>
    switch input
        Timeframes.o1  => "5S"
        Timeframes.o2  => "10S"
        Timeframes.o3  => "15S"
        Timeframes.o4  => "30S"
        Timeframes.o5  => "1"
        Timeframes.o6  => "2"
        Timeframes.o7  => "3"
        Timeframes.o8  => "5"
        Timeframes.o9  => "10"
        Timeframes.o10 => "15"
        Timeframes.o11 => "30"
        Timeframes.o12 => "60"
        Timeframes.o13 => "120"
        Timeframes.o14 => "180"
        Timeframes.o15 => "240"
        Timeframes.o16 => "360"
        Timeframes.o17 => "480"
        Timeframes.o18 => "720"
        Timeframes.o19 => "1D"
        Timeframes.o20 => "1W"
        Timeframes.o21 => "1M" 
        Timeframes.o22 => "3M"
        Timeframes.o23 => "6M"
        Timeframes.o24 => "12M"


// @function Produce the `timezone` parameter from the given user string input.
// @returns  string
getTimezone(simple Timezones input) =>
    switch input
        Timezones.utc   => "UTC+0"
        Timezones.exch  => syminfo.timezone
        =>                 str.tostring(input)


// @function Produce the line `style` parameter from the given user string input.
// @returns  string
getLineStyle(string input) =>
    switch input
        "Solid"     => line.style_solid
        "Dotted"    => line.style_dotted
        "Dashed"    => line.style_dashed


// @function Draw and update time separators on the chart. 
// @returns  void
drawSeparator(bool change, color color, int width, string style, int lookback) =>
    // @variable The collection of visible separators.
    var array<line> _separatorArray = array.new_line()
    // @variable The static separator line style.
    var string _style = getLineStyle(style)

    if change
        _separatorArray.push(
             line.new(
                 x1     = time,
                 x2     = time,
                 y1     = open,
                 // y1 and y2 must be distinct or otherwise result in a vertical line.
                 y2     = open + syminfo.mintick,
                 xloc   = xloc.bar_time, 
                 extend = extend.both, 
                 color  = color,
                 style  = _style,
                 width  = width
                 )
             )

        // Trim the exceeding number of visible separators.
        if _separatorArray.size() > lookback
            line.delete(_separatorArray.shift())


// @function
// @returns  
intervalChange(string tf, string session, string tz) =>
    // @variable The next interval UNIX time.
    var int _next = 0
    
    // The current bar opening time is at or over the interval.
    if time >= _next 
        _next := time_close(tf, session, tz)

    // The current bar encloses the interval intrabar. Bar can cover two interval (no else if).
    if time_close > _next
        _next := time_close(tf, session, tz, -1)

    ta.change(_next) > 0


// @function Detects changes in the specified timeframe.
// @returns  bool
method change(string timeframe, bool customTime) =>
    var string _customTz = getTimezone(timezoneInput)
    
    switch 
        timeframe.isseconds => timeframe.change(timeframe)
        customTime          => intervalChange(timeframe, "0000-0000", _customTz)
        =>                     intervalChange(timeframe, "", syminfo.timezone)


// @function Check if the specified separator `timeframe` can be displayed on the chart context.
// @returns  simple bool
method isVisible(simple string timeframe) =>
    timeframe.in_seconds(timeframe) > timeframe.in_seconds()

//#endregion


//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------

// @variable Is true if the separators are based on the exchange session.
var bool customTime = referenceInput == refOpt2


// Convert the separator timeframe user inputs into `timeframe` parameters.

var string separatorTimeframe1 = separatorTimeframeInput1.param()
var string separatorTimeframe2 = separatorTimeframeInput2.param()
var string separatorTimeframe3 = separatorTimeframeInput3.param()
var string separatorTimeframe4 = separatorTimeframeInput4.param()


//

var bool display1 = enableSeparatorInput1 and separatorTimeframe1.isVisible()
var bool display2 = enableSeparatorInput2 and separatorTimeframe2.isVisible()
var bool display3 = enableSeparatorInput3 and separatorTimeframe3.isVisible()
var bool display4 = enableSeparatorInput4 and separatorTimeframe4.isVisible()

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

bool change1 = display1 ? separatorTimeframe1.change(customTime) : na
bool change2 = display2 ? separatorTimeframe2.change(customTime) : na
bool change3 = display3 ? separatorTimeframe3.change(customTime) : na
bool change4 = display4 ? separatorTimeframe4.change(customTime) : na

//#endregion


//--------------------------------------------------------------------
//#region                        Visuals
//--------------------------------------------------------------------

if display1
    drawSeparator(
         change1,
         separatorColorInput1,
         separatorWidthInput1,
         separatorStyleInput1,
         separatorLookbackInput1
         )

if display2
    drawSeparator(
         change2,
         separatorColorInput2,
         separatorWidthInput2,
         separatorStyleInput2,
         separatorLookbackInput2
         )

if display3
    drawSeparator(
         change3,
         separatorColorInput3,
         separatorWidthInput3,
         separatorStyleInput3,
         separatorLookbackInput3
         )

if display4
    drawSeparator(
         change4,
         separatorColorInput4,
         separatorWidthInput4,
         separatorStyleInput4,
         separatorLookbackInput4
         )

//#endregion