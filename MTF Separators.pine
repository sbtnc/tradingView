// Â© sbtnc
// Created: 2024-03-10
// Last modified: 2024-10-12
// Version 1.0

// @version=5
indicator("Multi-Timeframe Separators bis", "MTF Separators", overlay = true, max_lines_count = 500)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

color COLOR_1 = color.green
color COLOR_2 = color.orange
color COLOR_3 = color.red
color COLOR_4 = color.blue

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

string g1    = "Separators"
string opt1  = "5 seconds"
string opt2  = "10 seconds"
string opt3  = "15 seconds"
string opt4  = "30 seconds"
string opt5  = "1 minute"
string opt6  = "2 minutes"
string opt7  = "3 minutes"
string opt8  = "5 minutes"
string opt9  = "10 minutes"
string opt10 = "15 minutes"
string opt11 = "30 minutes"
string opt12 = "1 hour"
string opt13 = "2 hours"
string opt14 = "3 hours"
string opt15 = "4 hours"
string opt16 = "6 hours"
string opt17 = "8 hours"
string opt18 = "12 hours"
string opt19 = "1 day"
string opt20 = "1 week"
string opt21 = "1 month"
string opt22 = "3 months"
string opt23 = "6 months"
string opt24 = "12 months"

enableSeparatorInput1       = input.bool    (true,      "",     group = g1, inline = "#1")
separatorTimeframeInput1    = input.string  (opt19,     "",     group = g1, inline = "#1", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24])
separatorLookbackInput1     = input.int     (50,        "",     group = g1, inline = "#1", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput2       = input.bool    (true,      "",     group = g1, inline = "#2")
separatorTimeframeInput2    = input.string  (opt20,     "",     group = g1, inline = "#2", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24])
separatorLookbackInput2     = input.int     (50,        "",     group = g1, inline = "#2", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput3       = input.bool    (true,      "",     group = g1, inline = "#3")
separatorTimeframeInput3    = input.string  (opt21,     "",     group = g1, inline = "#3", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24])
separatorLookbackInput3     = input.int     (50,        "",     group = g1, inline = "#3", minval = 1, maxval = 500, display = display.none)
enableSeparatorInput4       = input.bool    (false,     "",     group = g1, inline = "#4")
separatorTimeframeInput4    = input.string  (opt24,     "",     group = g1, inline = "#4", options = [opt1, opt2, opt3, opt4, opt5, opt6, opt7, opt8, opt9, opt10, opt11, opt12, opt13, opt14, opt15, opt16, opt17, opt18, opt19, opt20, opt21, opt22, opt23, opt24])
separatorLookbackInput4     = input.int     (50,        "",     group = g1, inline = "#4", minval = 1, maxval = 500, display = display.none)

string g2 = "Style"

separatorColorInput1        = input.color   (COLOR_1,   "",     group = g2, inline = "#1")
separatorWidthInput1        = input.int     (3,         "",     group = g2, inline = "#1", minval = 1, display = display.none)
separatorStyleInput1        = input.string  ("Dotted",  "",     group = g2, inline = "#1", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput2        = input.color   (COLOR_2,   "",     group = g2, inline = "#2")
separatorWidthInput2        = input.int     (1,         "",     group = g2, inline = "#2", minval = 1, display = display.none)
separatorStyleInput2        = input.string  ("Solid",   "",     group = g2, inline = "#2", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput3        = input.color   (COLOR_3,   "",     group = g2, inline = "#3")
separatorWidthInput3        = input.int     (2,         "",     group = g2, inline = "#3", minval = 1, display = display.none)
separatorStyleInput3        = input.string  ("Solid",   "",     group = g2, inline = "#3", options =["Solid", "Dashed", "Dotted"], display = display.none)
separatorColorInput4        = input.color   (COLOR_4,   "",     group = g2, inline = "#4")
separatorWidthInput4        = input.int     (3,         "",     group = g2, inline = "#4", minval = 1, display = display.none)
separatorStyleInput4        = input.string  ("Solid",   "",     group = g2, inline = "#4", options =["Solid", "Dashed", "Dotted"], display = display.none)

string g3               = "Preferences"
string refOpt1          = "Session Time"
string refOpt2          = "Day Time"
string referenceTooltip = "By default, the indicator uses the start of the trading session as a point of reference. " +
                         "See \"Security Info\" for more details.\n\n" + 
                         "In some markets, when the start of the trading session differs from the start of the day, " +
                         "you can use the \"Day Time\" option to prefer 00:00 instead.\n\n" +
                         "For example, the trading session on S&P500 is from 09:30 to 16:10 New York time. " +
                         "Drawing 2 hours separators produces for \"Session Time\" the intervals [09:30, 11:30, 13:30, 15:30] " +
                         "like the bars seen on the 2h chart, or for \"Day Time\" the intervals [10:00, 12:00, 14:00, 16:00]."       
string timezoneTooltip  = "By default, the indicator uses the exchange timezone. See \"Security Info\" for more details.\n\n" +
                         "When using the \"Day Time\" option as a reference, you can choose a particular timezone to determine the start of the day.\n\n" +
                         "Note: this implies looking at minutes data and might reduce the number of separators on higher timeframes charts."

referenceInput              = input.string  (refOpt1,       "Reference",    group = g3, tooltip = referenceTooltip, options = [refOpt2, refOpt1])
timezoneInput               = input.string  ("Exchange",    "Timezone",     group = g3, tooltip = timezoneTooltip, options = [
     "UTC",
     "Exchange",
     "Africa/Cairo",
     "Africa/Johannesburg",
     "Africa/Lagos",
     "Africa/Nairobi",
     "Africa/Tunis",
     "America/Argentina/Buenos_Aires",
     "America/Bogota",
     "America/Caracas",
     "America/Chicago",
     "America/Denver",
     "America/El_Salvador",
     "America/Juneau",
     "America/Lima",
     "America/Los_Angeles",
     "America/New_York",
     "America/Mexico_City",
     "America/Phoenix",
     "America/Santiago",
     "America/Sao_Paulo",
     "America/Toronto",
     "America/Vancouver",
     "Asia/Almaty",
     "Asia/Ashgabat",
     "Asia/Bahrain",
     "Asia/Bangkok",
     "Asia/Dubai",
     "Asia/Chongqing",
     "Asia/Colombo",
     "Asia/Ho_Chi_Minh",
     "Asia/Hong_Kong",
     "Asia/Istanbul",
     "Asia/Jakarta",
     "Asia/Jerusalem",
     "Asia/Karachi",
     "Asia/Kathmandu",
     "Asia/Kolkata",
     "Asia/Kuwait",
     "Asia/Manila",
     "Asia/Muscat",
     "Asia/Nicosia",
     "Asia/Qatar",
     "Asia/Riyadh",
     "Asia/Seoul",
     "Asia/Shanghai",
     "Asia/Singapore",
     "Asia/Taipei",
     "Asia/Tehran",
     "Asia/Tokyo",
     "Asia/Yangon",
     "Atlantic/Reykjavik",
     "Australia/Adelaide",
     "Australia/Brisbane",
     "Australia/Perth",
     "Australia/Sydney",
     "Europe/Amsterdam",
     "Europe/Athens",
     "Europe/Belgrade",
     "Europe/Berlin",
     "Europe/Bratislava",
     "Europe/Brussels",
     "Europe/Bucharest",
     "Europe/Budapest",
     "Europe/Copenhagen",
     "Europe/Dublin",
     "Europe/Helsinki",
     "Europe/Madrid",
     "Europe/Malta",
     "Europe/Moscow",
     "Europe/Lisbon",
     "Europe/London",
     "Europe/Luxembourg",
     "Europe/Oslo",
     "Europe/Paris",
     "Europe/Riga",
     "Europe/Rome",
     "Europe/Stockholm",
     "Europe/Tallinn",
     "Europe/Vilnius",
     "Europe/Warsaw",
     "Europe/Zurich",
     "Pacific/Auckland",
     "Pacific/Chatham",
     "Pacific/Fakaofo",
     "Pacific/Honolulu",
     "Pacific/Norfolk"
     ],
     display = display.none
 )

//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Produce the `timeframe` parameter from the given user string input.
// @returns  string
method param(simple string input) =>
    switch input 
        "5 seconds"  => "5S"
        "10 seconds" => "10S"
        "15 seconds" => "15S"
        "30 seconds" => "30S"
        "1 minute"   => "1"
        "2 minutes"  => "2"
        "3 minutes"  => "3"
        "5 minutes"  => "5"
        "10 minutes" => "10"
        "15 minutes" => "15"
        "30 minutes" => "30"
        "1 hour"     => "60"
        "2 hours"    => "120"
        "3 hours"    => "180"
        "4 hours"    => "240"
        "6 hours"    => "360"
        "8 hours"    => "480"
        "12 hours"   => "720"
        "1 day"      => "1D"
        "1 week"     => "1W"
        "1 month"    => "1M" 
        "3 months"   => "3M"
        "6 months"   => "6M"
        "12 months"  => "12M"


// @function Produce the `timezone` parameter from the given user string input.
// @returns  string
getTimezone(simple string input) =>
    switch input
        "UTC"       => "UTC+0"
        "Exchange"  => syminfo.timezone  
        => input


// @function Produce the line `style` parameter from the given user string input.
// @returns  string
getLineStyle(string input) =>
    switch input
        "Solid"     => line.style_solid
        "Dotted"    => line.style_dotted
        "Dashed"    => line.style_dashed


// @function Generate the list of time units separating each timeframes.
// @returns  array<int> 
getTimes(int multiplier, int end) =>
    array<int> _timeArray = array.new_int()
    for i = 0 to end -1 by multiplier
        _timeArray.push(i)
    _timeArray



intervalChange(string tf, string tz) =>
    // @variable The next interval UNIX time.
    var int _next = 0
    
    // The current bar opening time is at or over the interval.
    if time >= _next 
        _next := time_close(tf, "0000-0000", tz)

    // The current bar encloses the interval intrabar. Bar can cover two interval (no else if).
    if time_close > _next
        _next := time_close(tf, "0000-0000", tz, -1)

    ta.change(_next) > 0



// @function Check if the current bar year changed.
// @returns  bool
yearChange(string tz) =>
    ta.change(year(time, tz)) > 0


// Does it handle missing bars? (test on weekend)
checkForDefaultExchange(tfOpenTime, tfCloseTime) =>
    var int _lastTime = tfOpenTime

    log.info("\n{0} ----- {1}\nHTF {2} - {3}",
     str.format_time(time, "yyyy-MM-dd HH:mm:ss"),
     str.format_time(time_close, "yyyy-MM-dd HH:mm:ss"),
     str.format_time(tfOpenTime, "yyyy-MM-dd HH:mm:ss"),
     str.format_time(tfCloseTime, "yyyy-MM-dd HH:mm:ss")
     )

    if tfOpenTime >= time// and tfOpenTime < time_close
        _lastTime := tfOpenTime
        log.warning("\nHTF {0}", str.format_time(tfOpenTime, "yyyy-MM-dd HH:mm:ss"))

    else if tfCloseTime < time_close //tfCloseTime >= time and tfCloseTime < time_close
        _lastTime := tfCloseTime
        log.error("\nHTF {0}", str.format_time(tfCloseTime, "yyyy-MM-dd HH:mm:ss"))
    
    ta.change(_lastTime) > 0


// @function Detects changes in the specified `timeframe`.
//           In contrario to `timeframe.change()`, it uses 00:00 - 00:00 rather than the exchange session.
// @returns  bool
timeChangeOLD(string timeframe) =>
    var string _tz = getTimezone(timezoneInput)
    
    switch timeframe
        // Most granular timeframe, always even, allow chart tf [1s, 5s, 10s, 15s, 30s]
        "5S"  => timeframe.change(timeframe)
        "10S" => timeframe.change(timeframe)
        "15S" => timeframe.change(timeframe)
        "30S" => timeframe.change(timeframe)
        // can be uneven (45min chart / 30min separator), allow any chart tf (e.g., 27min), timezone offsets, possible trading day startime
        "1"   => intervalChange (timeframe, _tz)
        "2"   => intervalChange (timeframe, _tz)
        "3"   => intervalChange (timeframe, _tz)
        "5"   => intervalChange (timeframe, _tz)
        "10"  => intervalChange (timeframe, _tz)
        "15"  => intervalChange (timeframe, _tz)
        "30"  => intervalChange (timeframe, _tz)
        "60"  => intervalChange (timeframe, _tz)
        "120" => intervalChange (timeframe, _tz)
        "180" => intervalChange (timeframe, _tz)
        "240" => intervalChange (timeframe, _tz)
        "360" => intervalChange (timeframe, _tz)
        "480" => intervalChange (timeframe, _tz)
        "720" => intervalChange (timeframe, _tz)
        "1D"  => intervalChange (timeframe, _tz)
        "1W"  => intervalChange (timeframe, _tz)
        "1M"  => intervalChange (timeframe, _tz)
        "3M"  => intervalChange (timeframe, _tz)
        "6M"  => intervalChange (timeframe, _tz)
        "12M" => intervalChange (timeframe, _tz)


// @function Draw and update time separators on the chart. 
// @returns  void
drawSeparator(bool change, color color, int width, string style, int lookback) =>
    // @variable The collection of visible separators.
    var array<line> _separatorArray = array.new_line()
    // @variable The static separator line style.
    var string _style = getLineStyle(style)

    if change
        _separatorArray.push(
             line.new(
                 x1     = time,
                 x2     = time,
                 y1     = open,
                 // y1 and y2 must be distinct or otherwise result in a vertical line.
                 y2     = open + syminfo.mintick,
                 xloc   = xloc.bar_time, 
                 extend = extend.both, 
                 color  = color,
                 style  = _style,
                 width  = width
                 )
             )

        // Trim the exceeding number of visible separators.
        if _separatorArray.size() > lookback
            line.delete(_separatorArray.shift())


// @function Detects changes in the specified timeframe.
// @returns  bool
change(bool enabled, bool exchangeSession, string timeframe, tfTime, tfTimeClose) =>
    // Viable solution of uneven default timeframe
    //enabled ? (exchangeSession ? checkForDefaultExchange(tfTime, tfTimeClose) : timeChange(timeframe, getTimezone(timezoneInput))) : na

    enabled ? (exchangeSession ? timeframe.change(timeframe) : timeChangeOLD(timeframe)) : na


// @function Check if the specified separator `timeframe` can be displayed on the chart context.
// @returns  bool
method isVisible(string timeframe) =>
    var bool _isVisible = timeframe.in_seconds(timeframe) > timeframe.in_seconds()

//#endregion


//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------

// @variable Is true if the separators are based on the exchange session.
bool useExchangeSession = referenceInput == refOpt1


// Convert the separator timeframe user inputs into `timeframe` parameters.

var string separatorTimeframe1 = separatorTimeframeInput1.param()
var string separatorTimeframe2 = separatorTimeframeInput2.param()
var string separatorTimeframe3 = separatorTimeframeInput3.param()
var string separatorTimeframe4 = separatorTimeframeInput4.param()

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

[tfTime1, tfTimeClose1] = request.security("", separatorTimeframe1, [time, time_close], lookahead = barmerge.lookahead_on)
[tfTime2, tfTimeClose2] = request.security("", separatorTimeframe2, [time, time_close], lookahead = barmerge.lookahead_on)
[tfTime3, tfTimeClose3] = request.security("", separatorTimeframe3, [time, time_close], lookahead = barmerge.lookahead_on)
[tfTime4, tfTimeClose4] = request.security("", separatorTimeframe4, [time, time_close], lookahead = barmerge.lookahead_on)

bool change1 = change(enableSeparatorInput1, useExchangeSession, separatorTimeframe1, tfTime1, tfTimeClose1)
bool change2 = change(enableSeparatorInput2, useExchangeSession, separatorTimeframe2, tfTime2, tfTimeClose2)
bool change3 = change(enableSeparatorInput3, useExchangeSession, separatorTimeframe3, tfTime3, tfTimeClose3)
bool change4 = change(enableSeparatorInput4, useExchangeSession, separatorTimeframe4, tfTime4, tfTimeClose4)

//#endregion


//--------------------------------------------------------------------
//#region                        Visuals
//--------------------------------------------------------------------

// Plot the higher timeframe separators enabled in the inputs settings.

if enableSeparatorInput1 and separatorTimeframe1.isVisible()
    drawSeparator(
         change1,
         separatorColorInput1,
         separatorWidthInput1,
         separatorStyleInput1,
         separatorLookbackInput1
         )

if enableSeparatorInput2 and separatorTimeframe2.isVisible()
    drawSeparator(
         change2,
         separatorColorInput2,
         separatorWidthInput2,
         separatorStyleInput2,
         separatorLookbackInput2
         )

if enableSeparatorInput3 and separatorTimeframe3.isVisible()
    drawSeparator(
         change3,
         separatorColorInput3,
         separatorWidthInput3,
         separatorStyleInput3,
         separatorLookbackInput3
         )

if enableSeparatorInput4 and separatorTimeframe4.isVisible()
    drawSeparator(
         change4,
         separatorColorInput4,
         separatorWidthInput4,
         separatorStyleInput4,
         separatorLookbackInput4
         )

//#endregion