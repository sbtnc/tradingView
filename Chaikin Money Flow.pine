// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2019-01-05
// Last modified: 2023-04-30
// Version 2.1

// @version=5
indicator("Chaikin Money Flow", "CMF", precision=2)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

DEFAULT_MF_COLOR            = color.new(#656565, 20)
DEFAULT_BG_COLOR_NEGATIVE   = #ff4e3e
DEFAULT_BG_COLOR_POSITIVE   = #3fbe53
DEFAULT_ZERO_COLOR          = color.new(#656565, 90)


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

// Groups

g_1 = "Money Flow #1"
g_2 = "Money Flow #2"
g_3 = "Money Flow #3"


// Tooltips

t_gradientLength    = "The number of bars used for the dynamic gradient coloring." +
                         " The coloring is relative to the maximum and minimum values found over the period.\n\n" +
                         "Use a short period to emphasize the current market conditions or a long period to highlight past extreme values."


// Inputs

i_enable1           = input             (true,                      "Money Flow #1")
i_enable2           = input             (false,                     "Money Flow #2")
i_enable3           = input             (false,                     "Money Flow #3")

i_timeframe1        = input.timeframe   ("",                        "Timeframe",                                                                    group=g_1)
i_length1           = input.int         (20,                        "Length",       1,                                                              group=g_1)
i_positiveCmfColor1 = input             (DEFAULT_MF_COLOR,          "Money Flow",                                           inline="Colors",        group=g_1)
i_negativeCmfColor1 = input             (DEFAULT_MF_COLOR,          "",                                                     inline="Colors",        group=g_1)
i_dynamic1          = input             (false,                     "Dynamic gradient",                                     inline="Dynamic",       group=g_1)
i_gradientLength1   = input.int         (100,                       "",             minval=1,   tooltip=t_gradientLength,   inline="Dynamic",       group=g_1)
i_positiveBgColor1  = input             (DEFAULT_BG_COLOR_POSITIVE, "Background",                                           inline="Background",    group=g_1)
i_negativeBgColor1  = input             (DEFAULT_BG_COLOR_NEGATIVE, "",                                                     inline="Background",    group=g_1)

i_timeframe2        = input.timeframe   ("",                        "Timeframe",                                                                    group=g_2)
i_length2           = input.int         (20,                        "Length",       1,                                                              group=g_2)
i_positiveCmfColor2 = input             (DEFAULT_MF_COLOR,          "Money Flow",                                           inline="Colors",        group=g_2)
i_negativeCmfColor2 = input             (DEFAULT_MF_COLOR,          "",                                                     inline="Colors",        group=g_2)
i_dynamic2          = input             (false,                     "Dynamic gradient",                                     inline="Dynamic",       group=g_2)
i_gradientLength2   = input.int         (100,                       "",             minval=1,   tooltip=t_gradientLength,   inline="Dynamic",       group=g_2)
i_positiveBgColor2  = input             (DEFAULT_BG_COLOR_POSITIVE, "Background",                                           inline="Background",    group=g_2)
i_negativeBgColor2  = input             (DEFAULT_BG_COLOR_NEGATIVE, "",                                                     inline="Background",    group=g_2)

i_timeframe3        = input.timeframe   ("",                        "Timeframe",                                                                    group=g_3)
i_length3           = input.int         (20,                        "Length",       1,                                                              group=g_3)
i_positiveCmfColor3 = input             (DEFAULT_MF_COLOR,          "Money Flow",                                           inline="Colors",        group=g_3)
i_negativeCmfColor3 = input             (DEFAULT_MF_COLOR,          "",                                                     inline="Colors",        group=g_3)
i_dynamic3          = input             (false,                     "Dynamic gradient",                                     inline="Dynamic",       group=g_3)
i_gradientLength3   = input.int         (100,                       "",             minval=1,   tooltip=t_gradientLength,   inline="Dynamic",       group=g_3)
i_positiveBgColor3  = input             (DEFAULT_BG_COLOR_POSITIVE, "Background",                                           inline="Background",    group=g_3)
i_negativeBgColor3  = input             (DEFAULT_BG_COLOR_NEGATIVE, "",                                                     inline="Background",    group=g_3)


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

// @function    Get the conditional positive/negative color
// @return      color
f_getColor(float _val, color _positive, color _negative) =>
    _val >= 0 ? _positive : _negative


// @function    Get the conditional positive/negative gradient color between a specific range
// @return      color
f_getColor(float _val, float _range, color _positive, color _negative) =>
    color.from_gradient(_val, -_range, _range, _negative, _positive)


// @function    Return the CMF line color per user config
// @return      color
f_getCmfColor(bool _isDynamic, float _val, float _extremVal, color _positiveColor, color _negativeColor) =>
    switch _isDynamic
        false   => f_getColor(_val, _positiveColor, _negativeColor)
        true    => f_getColor(_val, _extremVal, _positiveColor, _negativeColor)


// @function    Get the CMF and its gradient coloring
// @return      float
f_getCmf(bool _isEnabled, int _length, int _gradientLength, bool _isDynamic, color _positiveColor, color _negativeColor) =>
    ad      = close == high and close == low or high == low ? 0 : ((2 * close - low - high) / (high - low)) * volume
    mf      = math.sum(ad, _length) / math.sum(volume, _length)

    highest = ta.highest(mf, _gradientLength)
    lowest  = ta.lowest(mf, _gradientLength)

    if _isEnabled
        extreme = math.max(highest, math.abs(lowest))
        c_cmf   = f_getCmfColor(_isDynamic, mf, extreme, _positiveColor, _negativeColor)
        [mf, c_cmf]
    else
        [na, na]


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var cumulativeVolume = 0.0


//--------------------------------------------------------------------
//                      Logic (orignal built-in CMF)
//--------------------------------------------------------------------

cumulativeVolume += nz(volume)


// Notify the user when the indicator can't be used

if barstate.islast and cumulativeVolume == 0
    runtime.error("No volume is provided by the data vendor.")


// Calculate the Money Flow

[mf1, c_cmf1] = request.security(syminfo.tickerid, i_timeframe1, f_getCmf(i_enable1, i_length1, i_gradientLength1, i_dynamic1, i_positiveCmfColor1, i_negativeCmfColor1))
[mf2, c_cmf2] = request.security(syminfo.tickerid, i_timeframe2, f_getCmf(i_enable2, i_length2, i_gradientLength2, i_dynamic2, i_positiveCmfColor2, i_negativeCmfColor2))
[mf3, c_cmf3] = request.security(syminfo.tickerid, i_timeframe3, f_getCmf(i_enable3, i_length3, i_gradientLength3, i_dynamic3, i_positiveCmfColor3, i_negativeCmfColor3))


//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

// Plot the CMF

cmf1 = plot(mf1, "MF 1", c_cmf1, display=i_enable1 ? display.all : display.none)

cmf2 = plot(mf2, "MF 2", c_cmf2, display=i_enable2 ? display.all : display.none)

cmf3 = plot(mf3, "MF 3", c_cmf3, display=i_enable3 ? display.all : display.none)


// Plot the zero line

hline(0, "Zero", DEFAULT_ZERO_COLOR)


// Fill with gradient backgrounds

zero = plot(0, "Zero", editable=false, display=display.none)

fill(zero, cmf1, 1, -0.01, i_positiveBgColor1, color.new(i_positiveBgColor1, 100))
fill(zero, cmf1, 0.01, -1, color.new(i_negativeBgColor1, 100), i_negativeBgColor1)

fill(zero, cmf2, 1, -0.01, i_positiveBgColor2, color.new(i_positiveBgColor2, 100))
fill(zero, cmf2, 0.01, -1, color.new(i_negativeBgColor2, 100), i_negativeBgColor2)

fill(zero, cmf3, 1, -0.01, i_positiveBgColor3, color.new(i_positiveBgColor3, 100))
fill(zero, cmf3, 0.01, -1, color.new(i_negativeBgColor3, 100), i_negativeBgColor3)