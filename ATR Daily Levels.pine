// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sbtnc
// Created: 2020-09-06
// Last modified: 2023-01-21
// Version 5.0

// @version=5
indicator("Daily ATR Levels", "D ATR", true)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var DEFAULT_OFFSET_START    = 1
var DEFAULT_LINE_LENGTH     = 8
var DEFAULT_LINE_STYLE      = line.style_dotted
var DEFAULT_LINE_WIDTH      = 2
var DEFAULT_LABEL_COLOR     = color(na)
var DEFAULT_LABEL_STYLE     = label.style_label_left
var DEFAULT_NOTIF_POSITION  = position.bottom_right
var DEFAULT_NOTIF_TEXTCOLOR = chart.fg_color
var DEFAULT_NOTIF_BGCOLOR   = color.new(color.gray, 90)


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

// Groups

var g1                  = "ATR"
var g2                  = "Style"
var g3                  = "Preferences"


// Tooltips

var t_overflowColor     = "Coloring after the price reached or exceeded the ATR boundary."
var t_showStartOffset   = "Draw levels on the right side of the price only.\n\n" +
                             "When disabled, draw levels from the start of the day."
var t_showNext          = "Plot next day's ATR levels when the market is closed.\n\n" +
                             "Note: Use this option if you like to plan your trades ahead of the next day or prepare on the weekend for Monday."


// Inputs

var i_period            = input.int     (20,                        "Length", 1,                                                group=g1)
var i_value             = input.string  ("Yesterday",               "Reference", ["Today", "Yesterday"],                        group=g1)
var i_color             = input         (color.gray,                "Color",                                                    group=g2)
var i_overflowColor     = input         (color.new(#50535e, 50),    "Overflow Color",                       t_overflowColor,    group=g2)
var i_showStartOffset   = input         (true,                      "Show Start Offset",                    t_showStartOffset,  group=g3)
var i_showNextDay       = input         (true,                      "Show Next ATR Levels",                 t_showNext,         group=g3)


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var float dayHigh       = na
var float dayLow        = na
var int dayBarIndex     = na
var float bottomPrice   = na
var float topPrice      = na

[dayOpen, prevDayClose, dayTime, dayAtr, prevDayAtr] = request.security(
     syminfo.tickerid,
     'D',
     [open, close[1], time, ta.atr(i_period), ta.atr(i_period)[1]],
     lookahead = barmerge.lookahead_on)

// For avoiding unexpected behaviors, don't display the indicator when requesting daily data on higher time frames
canDisplay = timeframe.in_seconds() <= timeframe.in_seconds("D")


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_isMarketClosed() => 
    barstate.islast and barstate.islastconfirmedhistory


f_canShowNextATR() =>
    i_showNextDay and f_isMarketClosed()


f_getAtr() =>
    switch i_value
        "Today"     => dayAtr
        "Yesterday" => f_canShowNextATR() ? dayAtr : prevDayAtr


f_hasGapped(float _open, float _prevClose) =>
    _open != _prevClose


f_getTopPrice(float _open, float _prevClose, float _high) =>
    f_hasGapped(_open, _prevClose) ? _prevClose > _high ? _prevClose : _high : _high


f_getBottomPrice(float _open, float _prevClose, float _low) =>
    f_hasGapped(_open, _prevClose) ? _prevClose < _low ? _prevClose : _low : _low


f_drawLine(int _x1, int _x2, float _y, color _c) =>
    var _l = line.new(na, na, na, na, style=DEFAULT_LINE_STYLE, width=DEFAULT_LINE_WIDTH)

    if barstate.islast
        line.set_xy1(_l, _x1, _y)
        line.set_xy2(_l, _x2, _y)
        line.set_color(_l, _c)


f_drawLabel(int _x, float _y, string _t, color _textColor, string _tooltip) =>
    var _l = label.new(na, na, style=DEFAULT_LABEL_STYLE, color=DEFAULT_LABEL_COLOR)

    if barstate.islast
        label.set_xy(_l, _x, _y)
        label.set_text(_l, _t)
        label.set_textcolor(_l, _textColor)
        label.set_tooltip(_l, _tooltip)


f_drawNotificationTable(array<bool> _conditions, array<string> _texts, array<string> _tooltips) =>
    // For the implementation purpose, throw an error when missing an element
    
    _conditionsSize = array.size(_conditions)
    _textsSize      = array.size(_texts)
    _tooltipsSize   = array.size(_tooltips)

    if _conditionsSize != _textsSize or _conditionsSize != _tooltipsSize
        runtime.error("Notification error: missing element in arrays.")

    // Create the notification table
    
    var table _t    = na
    var _columns    = _conditionsSize
    var _rows       = 1

    if barstate.isfirst
        _t := table.new(DEFAULT_NOTIF_POSITION, _columns, _rows)

    if barstate.islast
        // Clear previous notifications
        table.clear(_t, 0, 0, _columns - 1, _rows - 1)

        // Count the number of active notifications
        _active = 0
        
        for [index, _condition] in _conditions
            if _condition
                _text       = array.get(_texts, index)
                _tooltip    = array.get(_tooltips, index)

                table.cell(_t, _active, 0, _text, text_color=DEFAULT_NOTIF_TEXTCOLOR, bgcolor=DEFAULT_NOTIF_BGCOLOR, tooltip=_tooltip)

                _active += 1 


//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

atr = f_getAtr()


// When showing the next daily levels (looking like at the opening time)

if f_canShowNextATR()
    dayHigh     := close
    dayLow      := close
    bottomPrice := close
    topPrice    := close


// When showing the today/yesterday levels

else
    // Track the daily high and low on runtime instead of fetching them from a security call
    // This aims to avoid the `future leak` from the "jump" when using the bar replay function


    // 1/ Init on the first bar of the chart
    // 2/ Reset on new day change (condition should cover the extended sessions bars)
    if timeframe.change("1440") or barstate.isfirst
        dayHigh     := high
        dayLow      := low
        dayBarIndex := bar_index


    // Track the new higher high and lower low
    if high > dayHigh
        dayHigh     := high
    if low < dayLow
        dayLow      := low


    // Get top and bottom anchor prices (gap minded)
    bottomPrice     := f_getBottomPrice(dayOpen, prevDayClose, dayLow)
    topPrice        := f_getTopPrice(dayOpen, prevDayClose, dayHigh)


// Compute ATR levels prices

atrHigh             = bottomPrice   + atr
atrLow              = topPrice      - atr


// Handle the condiditional coloring

c_upper             = dayHigh >= atrHigh    ? i_overflowColor : i_color
c_lower             = dayLow <= atrLow      ? i_overflowColor : i_color


// Compose the labels and tooltips text

atrStr              = str.tostring(atr,     format.mintick)
upperPriceStr       = str.tostring(atrHigh, format.mintick)
lowerPriceStr       = str.tostring(atrLow,  format.mintick)

upperLabelText      = str.format("{0} ({1})", upperPriceStr, atrStr)
lowerLabelText      = lowerPriceStr

upperLabelTooltip   = str.format("{0} (D ATR: {1})", upperPriceStr, atrStr)
lowerLabelTooltip   = str.format("{0} (D ATR: {1})", lowerPriceStr, atrStr)


//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

// Draw the levels (lines and labels)

if canDisplay
    _offsetBarIndex = bar_index + DEFAULT_OFFSET_START
    _startBarIndex  = i_showStartOffset ? _offsetBarIndex : dayBarIndex
    _endBarIndex    = _offsetBarIndex + DEFAULT_LINE_LENGTH

    f_drawLine  (_startBarIndex, _endBarIndex, atrHigh, c_upper)
    f_drawLine  (_startBarIndex, _endBarIndex, atrLow,  c_lower)

    f_drawLabel (_endBarIndex, atrHigh, upperLabelText, c_upper, upperLabelTooltip)
    f_drawLabel (_endBarIndex, atrLow,  lowerLabelText, c_lower, lowerLabelTooltip)


// Plot additionnal values for helping as well as for providing default alert conditions

plot(canDisplay ? atrHigh       : na,   "Upper Level",  c_upper,            editable=false,    display=display.status_line + display.data_window + display.price_scale)
plot(canDisplay ? atrLow        : na,   "Lower Lever",  c_lower,            editable=false,    display=display.status_line + display.data_window + display.price_scale)
plot(canDisplay ? atr           : na,   "ATR",          i_overflowColor,    editable=false,    display=display.status_line + display.data_window)


// Draw the notification table

notifications           = array.from(
                             f_canShowNextATR() and canDisplay,
                             not canDisplay
                             )
notificationMessages    = array.from(
                             "»",
                             "▽"
                             )
notificationsTooltips   = array.from(
                             "The indicator is currently displaying how the ATR levels would look like at next session's open.",
                             "The indicator is currently not displayed. Please select an higher timeframe on the indicator's settings."
                             )

f_drawNotificationTable(notifications, notificationMessages, notificationsTooltips)


//--------------------------------------------------------------------
//                                Debug
//--------------------------------------------------------------------

//plotchar(na,                                "----------",   "", location.top,   editable=false, display=display.data_window)
//plot(topPrice,                              "top",                              editable=false, display=display.data_window)
//plot(bottomPrice,                           "bottom",                           editable=false, display=display.data_window)
//plot(dayOpen,                               "open",                             editable=false, display=display.data_window)
//plot(prevDayClose,                          "prevClose",                        editable=false, display=display.data_window)
//plot(f_hasGapped(dayOpen, prevDayClose),    "gap?",                             editable=false, display=display.data_window)
//plot(dayLow,                                "low",                              editable=false, display=display.data_window)
//plot(f_isMarketClosed(),                    "closed?",                          editable=false, display=display.data_window)

//plotchar(na,                                "----------",   "", location.top,   editable=false, display=display.data_window)
//plot(dayAtr,                                "Current ATR",                      editable=false, display=display.data_window)
//plot(prevDayAtr,                            "Previous ATR",                     editable=false, display=display.data_window)
//plot(atr,                                   "Used ATR",                         editable=false, display=display.data_window)
