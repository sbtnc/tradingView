// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-09-06
// Last modified: 2022-05-01
// Version 5.0

// @version=5
indicator("Daily ATR Levels", "D ATR", true)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var DEFAULT_COLOR           = color.gray
var DEFAULT_HIGHLIGHT_COLOR = color.new(DEFAULT_COLOR, 60)
var DEFAULT_OFFSET_START    = 1
var DEFAULT_LINE_STYLE      = line.style_dotted
var DEFAULT_LINE_WIDTH      = 2
var DEFAULT_LINE_LENGTH     = 8
var DEFAULT_LABEL_STYLE     = label.style_label_left
var DEFAULT_LABEL_COLOR     = color(na)


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

var g_indicator     = "ATR"
var g_style         = "Style"

var i_period        = input        (20,                          "Length",                               group=g_indicator)
var i_value         = input.string ("Yesterday",                 "Reference", ["Today", "Yesterday"],    group=g_indicator)
var i_color         = input        (DEFAULT_COLOR,               "Color",                                group=g_style)
var i_overflowColor = input        (DEFAULT_HIGHLIGHT_COLOR,     "Overflow Color",                       group=g_style)
var i_startOffset   = input        (true,                        "Show Start Offset",                    group=g_style)


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var float dayHigh = na
var float dayLow = na
var int startBarIndex = na

[dayOpen, prevDayClose, dayTime, dayATR] = request.security(
      syminfo.tickerid,
      'D',
      [open, close[1], time, ta.atr(i_period)[i_value == "Yesterday" ? 1 : 0]],
      lookahead = barmerge.lookahead_on)

// For avoiding unexpected behaviors, don't display the indicator when requesting data from lower time frames
can_display_timeframe       = not (timeframe.isweekly or timeframe.ismonthly)


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_hasGapped(_open, _prevClose) => _open != _prevClose

f_getTopPrice(_open, _prevClose, _high) => f_hasGapped(_open, _prevClose) ? _prevClose > _high ? _prevClose : _high : _high

f_getBottomPrice(_open, _prevClose, _low) => f_hasGapped(_open, _prevClose) ? _prevClose < _low ? _prevClose : _low : _low

f_drawLine(int _x1, int _x2, float _y, color _c) =>
    var _l = line.new(na, na, na, na, style=DEFAULT_LINE_STYLE, width=DEFAULT_LINE_WIDTH)

    if barstate.islast
        line.set_xy1(_l, _x1, _y)
        line.set_xy2(_l, _x2, _y)
        line.set_color(_l, _c)

f_drawLabel(int _x, float _y, string _t, color _textColor, string _tooltip) =>
    var _l = label.new(na, na, style=DEFAULT_LABEL_STYLE, color=DEFAULT_LABEL_COLOR)

    if barstate.islast
        label.set_xy(_l, _x, _y)
        label.set_text(_l, _t)
        label.set_textcolor(_l, _textColor)
        label.set_tooltip(_l, _tooltip)


//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

// Collect the daily high and low on runtime instead of fetching them from a security call
// It aims to avoid the initial `future leak` from the "jump" when using the bar replay function

// Init on the first bar / reset on following day change
if not (dayTime == dayTime[1])
    dayHigh := high
    dayLow := low
    startBarIndex := bar_index

// Tracks newest high and low
if high > dayHigh
    dayHigh := high
if low < dayLow
    dayLow := low


// Computes ATR levels prices

atrHigh = f_getBottomPrice(dayOpen, prevDayClose, dayLow) + dayATR
atrLow = f_getTopPrice(dayOpen, prevDayClose, dayHigh) - dayATR


// Handles the condiditional coloring

// when price is passed the upper or lower, this last gets highlighted
level_high_color = dayHigh > atrHigh ? i_overflowColor : i_color
level_low_color = dayLow < atrLow ? i_overflowColor : i_color


// Composes the labels and tooltips text

atrStr = str.tostring(dayATR, format.mintick)
upperPriceStr = str.tostring(atrHigh, format.mintick)
lowerPriceStr = str.tostring(atrLow, format.mintick)

upperLabelText = str.format("{0} ({1})", upperPriceStr, atrStr)
lowerLabelText = lowerPriceStr

upperLabelTooltip = str.format("{0} (D ATR: {1})", upperPriceStr, atrStr)
lowerLabelTooltip = str.format("{0} (D ATR: {1})", lowerPriceStr, atrStr)

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if can_display_timeframe
    _offsetBarIndex = bar_index + DEFAULT_OFFSET_START
    _start  = i_startOffset ? _offsetBarIndex : startBarIndex
    _end    = _offsetBarIndex + DEFAULT_LINE_LENGTH

    f_drawLine(_start, _end, atrHigh, level_high_color)
    f_drawLine(_start, _end, atrLow, level_low_color)
    f_drawLabel(_end, atrHigh, upperLabelText, level_high_color, upperLabelTooltip)
    f_drawLabel(_end, atrLow, lowerLabelText, level_low_color, lowerLabelTooltip)