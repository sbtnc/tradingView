// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-09-06
// Last modified: 2023-01-15
// Version 5.0

// @version=5
indicator("Daily ATR Levels", "D ATR", true)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var DEFAULT_OFFSET_START    = 1
var DEFAULT_LINE_LENGTH     = 8
var DEFAULT_LINE_STYLE      = line.style_dotted
var DEFAULT_LINE_WIDTH      = 2
var DEFAULT_LABEL_COLOR     = color(na)
var DEFAULT_LABEL_STYLE     = label.style_label_left


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

// Groups

var g1                  = "ATR"
var g2                  = "Style"
var g3                  = "Preferences"


// Tooltips

var t_overflowColor     = "Coloring after the price reached or exceeded the ATR boundary."
var t_showStartOffset   = "Draw levels on the right side of the price only.\n\n" +
                             "When disabled, draw levels from the start of the day."
var t_showNext          = "Plot next day's ATR levels when the market is closed.\n\n" +
                             "Note: Use this option if you like to plan your trades ahead of the next day or prepare on the weekend for Monday."


// Inputs

var i_period            = input.int     (20,                        "Length", 1,                                                group=g1)
var i_value             = input.string  ("Yesterday",               "Reference", ["Today", "Yesterday"],                        group=g1)
var i_color             = input         (color.gray,                "Color",                                                    group=g2)
var i_overflowColor     = input         (color.new(color.gray, 60), "Overflow Color",                       t_overflowColor,    group=g2)
var i_showStartOffset   = input         (true,                      "Show Start Offset",                    t_showStartOffset,  group=g3)
var i_showNextDay       = input         (true,                      "Show Next ATR Levels",                 t_showNext,         group=g3)


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var float dayHigh   = na
var float dayLow    = na
var int dayBarIndex = na

[dayOpen, prevDayClose, dayTime, dayAtr, prevDayAtr] = request.security(
     syminfo.tickerid,
     'D',
     [open, close[1], time, ta.atr(i_period), ta.atr(i_period)[1]],
     lookahead = barmerge.lookahead_on)

// For avoiding unexpected behaviors, don't display the indicator when requesting daily data on higher time frames
canDisplay = timeframe.in_seconds() <= timeframe.in_seconds("D")


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_isMarketClosed() => 
    barstate.islast and barstate.islastconfirmedhistory

f_canShowNextATR() =>
    i_showNextDay and f_isMarketClosed()

f_getAtr() =>
    switch i_value
        "Today"     => dayAtr
        "Yesterday" => f_canShowNextATR() ? dayAtr : prevDayAtr

f_hasGapped(float _open, float _prevClose) =>
    _open != _prevClose

f_getTopPrice(float _open, float _prevClose, float _high) =>
    f_hasGapped(_open, _prevClose) ? _prevClose > _high ? _prevClose : _high : _high

f_getBottomPrice(float _open, float _prevClose, float _low) =>
    f_hasGapped(_open, _prevClose) ? _prevClose < _low ? _prevClose : _low : _low

f_drawLine(int _x1, int _x2, float _y, color _c) =>
    var _l = line.new(na, na, na, na, style=DEFAULT_LINE_STYLE, width=DEFAULT_LINE_WIDTH)

    if barstate.islast
        line.set_xy1(_l, _x1, _y)
        line.set_xy2(_l, _x2, _y)
        line.set_color(_l, _c)

f_drawLabel(int _x, float _y, string _t, color _textColor, string _tooltip) =>
    var _l = label.new(na, na, style=DEFAULT_LABEL_STYLE, color=DEFAULT_LABEL_COLOR)

    if barstate.islast
        label.set_xy(_l, _x, _y)
        label.set_text(_l, _t)
        label.set_textcolor(_l, _textColor)
        label.set_tooltip(_l, _tooltip)


//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

atr = f_getAtr()

// Collect the daily high and low on runtime instead of fetching them from a security call
// It aims to avoid the initial `future leak` from the "jump" when using the bar replay function

// Init on the first bar / reset on following day change
//if not (dayTime == dayTime[1])
//if ta.change(time('1440'))
if not (time('1440') == time('1440')[1])
    dayHigh     := high
    dayLow      := low
    dayBarIndex := bar_index

// Tracks newest high and low
if high > dayHigh
    dayHigh     := high
if low < dayLow
    dayLow      := low


// Get top and bottom anchor prices (gap minded)

bottomPrice         = f_getBottomPrice(dayOpen, prevDayClose, dayLow)
topPrice            = f_getTopPrice(dayOpen, prevDayClose, dayHigh)


// Override values when displaying tomorrow's ATR

if f_canShowNextATR()
    dayHigh     := close
    dayLow      := close
    bottomPrice := close
    topPrice    := close


// Compute ATR levels prices

atrHigh             = bottomPrice + atr
atrLow              = topPrice - atr


// Handle the condiditional coloring

c_upper             = dayHigh >= atrHigh ? i_overflowColor : i_color
c_lower             = dayLow <= atrLow ? i_overflowColor : i_color


// Compose the labels and tooltips text

atrStr              = str.tostring(atr, format.mintick)
upperPriceStr       = str.tostring(atrHigh, format.mintick)
lowerPriceStr       = str.tostring(atrLow, format.mintick)

upperLabelText      = str.format("{0} ({1})", upperPriceStr, atrStr)
lowerLabelText      = lowerPriceStr

upperLabelTooltip   = str.format("{0} (D ATR: {1})", upperPriceStr, atrStr)
lowerLabelTooltip   = str.format("{0} (D ATR: {1})", lowerPriceStr, atrStr)


//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if canDisplay
    _offsetBarIndex = bar_index + DEFAULT_OFFSET_START
    _startBarIndex  = i_showStartOffset ? _offsetBarIndex : dayBarIndex
    _endBarIndex    = _offsetBarIndex + DEFAULT_LINE_LENGTH

    f_drawLine(_startBarIndex, _endBarIndex, atrHigh, c_upper)
    f_drawLine(_startBarIndex, _endBarIndex, atrLow, c_lower)
    f_drawLabel(_endBarIndex, atrHigh, upperLabelText, c_upper, upperLabelTooltip)
    f_drawLabel(_endBarIndex, atrLow, lowerLabelText, c_lower, lowerLabelTooltip)


//--------------------------------------------------------------------
//                                Debug
//--------------------------------------------------------------------

plotchar(topPrice,                              "top",          "", location.top, color.new(color.gray, 100))
plotchar(bottomPrice,                           "bottom",       "", location.top, color.new(color.gray, 100))
plotchar(dayOpen,                               "open",         "", location.top, color.new(color.gray, 100))
plotchar(prevDayClose,                          "prevClose",    "", location.top, color.new(color.gray, 100))
plotchar(f_hasGapped(dayOpen, prevDayClose),    "gap?",         "", location.top, color.new(color.gray, 100))
plotchar(dayLow,                                "low",          "", location.top, color.new(color.gray, 100))
plotchar(f_isMarketClosed(),                    "closed?",      "", location.top, color.new(color.gray, 100))