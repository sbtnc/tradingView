// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2022-04-26
// Last modified: 2023-08-25
// Version 3.0

//@version=5
indicator("HTF Liquidity Levels", "HTF Liquidity", true, max_lines_count=500)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

int OFFSET_START    = 0
int OFFSET_END      = 25

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

group1              = "Liquidity Levels"
group2              = "Purged Liquidity"

t_purgeTime         = "Clear all purged levels on the new selected timeframe rotation."

i_isEnabled1        = input             (true,                          "",         inline="Level1",                group=group1)
i_timeframe1        = input.timeframe   ("M",                           "",         inline="Level1",                group=group1)
i_upperColor1       = input             (color.rgb(135, 254, 7, 90),    "",         inline="Level1",                group=group1)
i_lowerColor1       = input             (color.new(color.orange, 90),   "",         inline="Level1",                group=group1)
i_width1            = input             (10,                            "Width",    inline="Level1",                group=group1,   display=display.none)

i_isEnabled2        = input             (true,                          "",         inline="Level2",                group=group1)
i_timeframe2        = input.timeframe   ("W",                           "",         inline="Level2",                group=group1)
i_upperColor2       = input             (color.new(color.lime, 70),     "",         inline="Level2",                group=group1)
i_lowerColor2       = input             (color.new(color.red, 70),      "",         inline="Level2",                group=group1)
i_width2            = input             (5,                             "Width",    inline="Level2",                group=group1,   display=display.none)

i_isEnabled3        = input             (true,                          "",         inline="Level3",                group=group1)
i_timeframe3        = input.timeframe   ("D",                           "",         inline="Level3",                group=group1)
i_upperColor3       = input             (color.new(color.green, 70),    "",         inline="Level3",                group=group1)
i_lowerColor3       = input             (color.rgb(242, 54, 69, 70),    "",         inline="Level3",                group=group1)
i_width3            = input             (2,                             "Width",    inline="Level3",                group=group1,   display=display.none)

i_isEnabled4        = input             (false,                         "",         inline="Level4",                group=group1)
i_timeframe4        = input.timeframe   ("240",                         "",         inline="Level4",                group=group1)
i_upperColor4       = input             (color.rgb(0, 151, 167, 70),    "",         inline="Level4",                group=group1)
i_lowerColor4       = input             (color.rgb(123, 31, 162, 70),   "",         inline="Level4",                group=group1)
i_width4            = input             (1,                             "Width",    inline="Level4",                group=group1,   display=display.none)


i_isEnabled5        = input             (false,                         "",         inline="Level5",                group=group1)
i_timeframe5        = input.timeframe   ("60",                          "",         inline="Level5",                group=group1)
i_upperColor5       = input             (color.rgb(0, 96, 100, 70),     "",         inline="Level5",                group=group1)
i_lowerColor5       = input             (color.rgb(74, 20, 140, 70),    "",         inline="Level5",                group=group1)
i_width5            = input             (1,                             "Width",    inline="Level5",                group=group1,   display=display.none)

i_purgedLevelColor  = input             (color.new(color.gray, 70),     "Color",                                    group=group2)
i_purgedLevelStyle  = input.string      ("Dashed",                      "Style",    ["Solid", "Dashed", "Dotted"],  group=group2,   display=display.none)
i_purgeTime         = input.timeframe   ("D",                           "Removal", tooltip=t_purgeTime,            group=group2,    display=display.none)

//#endregion


//--------------------------------------------------------------------
//#region                         Types 
//--------------------------------------------------------------------

type Level
    float price
    line line

//#endregion


//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------

var highsArray          = array.new<Level>()
var lowsArray           = array.new<Level>()
var purgedArray         = array.new<Level>()

[prevHigh1, prevLow1]   = request.security(syminfo.tickerid, i_timeframe1,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh2, prevLow2]   = request.security(syminfo.tickerid, i_timeframe2,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh3, prevLow3]   = request.security(syminfo.tickerid, i_timeframe3,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh4, prevLow4]   = request.security(syminfo.tickerid, i_timeframe4,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh5, prevLow5]   = request.security(syminfo.tickerid, i_timeframe5,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)

//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Check if a given timeframe is higher than the chart's timeframe
// @returns bool
f_isHigherTimeframe(string timeframe) => timeframe.in_seconds(timeframe) > timeframe.in_seconds()
    

// @function Get the line style argument for the `style` parameter from the input settings
// @returns (const string) One of the `line.style_*` built-in constants
f_getLineStyle() =>
    switch i_purgedLevelStyle
        "Solid"     => line.style_solid
        "Dotted"    => line.style_dotted
        "Dashed"    => line.style_dashed


// @function Draw a liquidty level
// @returns line
f_drawLine(float y, color color, int width) => line.new(bar_index, y, bar_index, y, color=color, width=width)


// @function Store new upper and lower liquidity levels
// @returns void
f_createLevels(float h, float l, color upperColor, color lowerColor, int width) =>
    highsArray.push(Level.new(h, f_drawLine(h, upperColor, width)))
    lowsArray.push(Level.new(l, f_drawLine(l, lowerColor, width)))


// @function Update the levels positions
// @returns void
method updatePosition(array<Level> this) =>
    _x1 = bar_index + OFFSET_START
    _x2 = bar_index + OFFSET_END
    for _level in this
        _level.line.set_x1(_x1)
        _level.line.set_x2(_x2)


// @function Transfer a level from an array to another
// @returns void
method transferTo(array<Level> this, array<Level> dest, int index) =>
    dest.push(this.remove(index))


// @function Highlight a level that have its liquidity "purged"
// @returns line
method highlightPurgedLevel(line this) =>
    var _style = f_getLineStyle()
    this.set_color(i_purgedLevelColor)
    this.set_style(_style)


// @function Update the levels that got their liquidity taken
// @returns (bool) Some levels were purged
method updateLevels(array<Level> this, array<Level> purgedArray, bool isUpperLevel) =>
    _hasPurgedSome = false
    _size = this.size()

    if _size > 0
        for i = _size -1 to 0
            _level = this.get(i)
            if isUpperLevel ? (high > _level.price) : (low < _level.price)
                // Highlight the status change
                _level.line.highlightPurgedLevel()
                // Transfer to the purged array
                this.transferTo(purgedArray, i)
                _hasPurgedSome := true
    
    _hasPurgedSome


// @function Remove the levels in the array and delete their lines
// @returns void
method clearLevels(array<Level> this) =>
    _size = this.size()

    if _size > 0
        for i = _size -1 to 0
            _level = this.remove(i)
            _level.line.delete()

//#endregion

//--------------------------------------------------------------------
//#region                   Plotting & styling
//--------------------------------------------------------------------
    
// Create levels on historical bars

if i_isEnabled5 and f_isHigherTimeframe(i_timeframe5) and timeframe.change(i_timeframe5)
    f_createLevels(prevHigh5, prevLow5, i_upperColor5, i_lowerColor5, i_width5)

if i_isEnabled4 and f_isHigherTimeframe(i_timeframe4) and timeframe.change(i_timeframe4)
    f_createLevels(prevHigh4, prevLow4, i_upperColor4, i_lowerColor4, i_width4)

if i_isEnabled3 and f_isHigherTimeframe(i_timeframe3) and timeframe.change(i_timeframe3)
    f_createLevels(prevHigh3, prevLow3, i_upperColor3, i_lowerColor3, i_width3)

if i_isEnabled2 and f_isHigherTimeframe(i_timeframe2) and timeframe.change(i_timeframe2)
    f_createLevels(prevHigh2, prevLow2, i_upperColor2, i_lowerColor2, i_width2)

if i_isEnabled1 and f_isHigherTimeframe(i_timeframe1) and timeframe.change(i_timeframe1)
    f_createLevels(prevHigh1, prevLow1, i_upperColor1, i_lowerColor1, i_width1)


// Update levels positions to "float" at the right of the latest bar

if barstate.islast
    highsArray.updatePosition()
    lowsArray.updatePosition()
    purgedArray.updatePosition()


// Update the levels that got their liquidity taken

hasPurgedSomeHighs = highsArray.updateLevels(purgedArray, true)
hasPurgedSomeLows = lowsArray.updateLevels(purgedArray, false)


// Clean up, on a new resolution, the levels that had their liquidity taken

if timeframe.change(i_purgeTime)
    purgedArray.clearLevels()

//#endregion


//--------------------------------------------------------------------
//#region                         Alerts
//--------------------------------------------------------------------

alertcondition(hasPurgedSomeHighs,                      "Purging Up",   "{{ticker}} Purging Up Liquidity")
alertcondition(hasPurgedSomeLows,                       "Purging Down", "{{ticker}} Purging Down Liquidity")
alertcondition(hasPurgedSomeHighs or hasPurgedSomeLows, "Purging",      "{{ticker}} Purging Liquidity")

//#endregion