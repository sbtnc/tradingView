// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2022-04-26
// Last modified: 2023-08-25
// Version 3.0

//@version=5
indicator("HTF Liquidity Levels", "HTF Liquidity", overlay=true, max_lines_count=500)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var START_OFFSET                = 0
var END_OFFSET                  = 25


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

group1              = "Liquidity Levels"
group2              = "Purged Liquidity"

i_isEnabled1        = input             (true,                          "",         inline="Level1",                group=group1)
i_timeframe1        = input.timeframe   ("M",                           "",         inline="Level1",                group=group1)
i_upperColor1       = input             (color.rgb(135, 254, 7, 90),    "",         inline="Level1",                group=group1)
i_lowerColor1       = input             (color.new(color.orange, 90),   "",         inline="Level1",                group=group1)
i_width1            = input             (10,                            "Width",    inline="Level1",                group=group1)

i_isEnabled2        = input             (true,                          "",         inline="Level2",                group=group1)
i_timeframe2        = input.timeframe   ("W",                           "",         inline="Level2",                group=group1)
i_upperColor2       = input             (color.new(color.lime, 70),     "",         inline="Level2",                group=group1)
i_lowerColor2       = input             (color.new(color.red, 70),      "",         inline="Level2",                group=group1)
i_width2            = input             (5,                             "Width",    inline="Level2",                group=group1)

i_isEnabled3        = input             (true,                          "",         inline="Level3",                group=group1)
i_timeframe3        = input.timeframe   ("D",                           "",         inline="Level3",                group=group1)
i_upperColor3       = input             (color.new(color.green, 70),    "",         inline="Level3",                group=group1)
i_lowerColor3       = input             (color.rgb(242, 54, 69, 70),    "",         inline="Level3",                group=group1)
i_width3            = input             (2,                             "Width",    inline="Level3",                group=group1)

i_isEnabled4        = input             (false,                         "",         inline="Level4",                group=group1)
i_timeframe4        = input.timeframe   ("240",                         "",         inline="Level4",                group=group1)
i_upperColor4       = input             (color.rgb(0, 151, 167, 70),    "",         inline="Level4",                group=group1)
i_lowerColor4       = input             (color.rgb(123, 31, 162, 70),   "",         inline="Level4",                group=group1)
i_width4            = input             (1,                             "Width",    inline="Level4",                group=group1)

i_isEnabled5        = input             (false,                         "",         inline="Level5",                group=group1)
i_timeframe5        = input.timeframe   ("60",                          "",         inline="Level5",                group=group1)
i_upperColor5       = input             (color.rgb(0, 96, 100, 70),     "",         inline="Level5",                group=group1)
i_lowerColor5       = input             (color.rgb(74, 20, 140, 70),    "",         inline="Level5",                group=group1)
i_width5            = input             (1,                             "Width",    inline="Level5",                group=group1)

i_purgedLevelColor  = input             (color.new(color.gray, 70),     "Color",                                    group=group2)
i_purgedLevelStyle  = input.string      ("Dashed",                      "Style",    ["Solid", "Dashed", "Dotted"],  group=group2)


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var highsArray          = array.new_float()
var lowsArray           = array.new_float()
var highLinesArray      = array.new_line()
var lowLinesArray       = array.new_line()
var purgedLinesArray    = array.new_line()
var float dayHigh       = na
var float dayLow        = na

[prevHigh1, prevLow1]   = request.security(syminfo.tickerid, i_timeframe1,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh2, prevLow2]   = request.security(syminfo.tickerid, i_timeframe2,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh3, prevLow3]   = request.security(syminfo.tickerid, i_timeframe3,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh4, prevLow4]   = request.security(syminfo.tickerid, i_timeframe4,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)
[prevHigh5, prevLow5]   = request.security(syminfo.tickerid, i_timeframe5,  [high[1], low[1]],  lookahead=barmerge.lookahead_on)


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_drawLine(float _y, color _c, int _w=1) => line.new(bar_index, _y, bar_index, _y, color=_c, width=_w)

f_create(float _high, float _low, color _upperColor, color _lowerColor, int _linewidth) =>
    array.push(highsArray, _high)
    array.push(lowsArray, _low)
    array.push(highLinesArray, f_drawLine(_high, _upperColor, _linewidth))
    array.push(lowLinesArray, f_drawLine(_low, _lowerColor, _linewidth))

f_updateStickyLevels(array<line> _levels) =>
    for _line in _levels
        line.set_x1(_line, bar_index + START_OFFSET)
        line.set_x2(_line, bar_index + END_OFFSET)

f_moveLevel(array<line> _from, array<line> _to, line _level, int _index) =>
    array.push(_to, _level)
    array.remove(_from, _index)

f_highlightPurgedLevel(line _level) =>
    _style = i_purgedLevelStyle == "Solid" ? line.style_solid : i_purgedLevelStyle == "Dashed" ? line.style_dashed : line.style_dotted
    line.set_color(_level, i_purgedLevelColor)
    line.set_style(_level, _style)

f_updateUpperLevels(float _high, array<float> _highs, array<line> _levels, array<line> _purgedLevels) =>
    while array.min(_highs) < _high
        for [_index, _value] in _highs
            if _high > _value
                _line = array.get(_levels, _index)
                f_highlightPurgedLevel(_line)
                f_moveLevel(_levels, _purgedLevels, _line, _index)
                array.remove(_highs, _index)

f_updateLowerLevels(float _low, array<float> _lows, array<line> _levels, array<line> _purgedLevels) =>
    while array.max(_lows) > _low
        for [_index, _value] in _lows
            if _low < _value
                _line = array.get(_levels, _index)
                f_highlightPurgedLevel(_line)
                f_moveLevel(_levels, _purgedLevels, _line, _index) 
                array.remove(_lows, _index)

f_clearLevels(array<line> _levels) =>
    while array.size(_levels) > 0
        for [_index, _line] in _levels
            line.delete(array.remove(_levels, _index))

f_isHigherTimeframe(string _timeframe) => timeframe.in_seconds() <= timeframe.in_seconds(_timeframe)


//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------
    
// Create levels on historical bars

if i_isEnabled5 and f_isHigherTimeframe(i_timeframe5) and ta.change(time(i_timeframe5))
    f_create(prevHigh5, prevLow5, i_upperColor5, i_lowerColor5, i_width5)

if i_isEnabled4 and f_isHigherTimeframe(i_timeframe4) and ta.change(time(i_timeframe4))
    f_create(prevHigh4, prevLow4, i_upperColor4, i_lowerColor4, i_width4)

if i_isEnabled3 and f_isHigherTimeframe(i_timeframe3) and ta.change(time(i_timeframe3))
    f_create(prevHigh3, prevLow3, i_upperColor3, i_lowerColor3, i_width3)

if i_isEnabled2 and f_isHigherTimeframe(i_timeframe2) and ta.change(time(i_timeframe2))
    f_create(prevHigh2, prevLow2, i_upperColor2, i_lowerColor2, i_width2)

if i_isEnabled1 and f_isHigherTimeframe(i_timeframe1) and ta.change(time(i_timeframe1))
    f_create(prevHigh1, prevLow1, i_upperColor1, i_lowerColor1, i_width1)


// Update levels positions to "stick" at the right of the latest bar

if barstate.islast
    f_updateStickyLevels(highLinesArray)
    f_updateStickyLevels(lowLinesArray)
    f_updateStickyLevels(purgedLinesArray)


// Set and highlight, immediately, levels that got their liquidity taken

f_updateUpperLevels(high, highsArray, highLinesArray, purgedLinesArray)
f_updateLowerLevels(low, lowsArray, lowLinesArray, purgedLinesArray)


// Clean up, at the end of each day, levels that had their liquidity taken

if ta.change(time("D"))
    f_clearLevels(purgedLinesArray)