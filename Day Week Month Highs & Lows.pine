// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-01-12
// Last modified: 2022-02-05
// version 3.0

// @version=5
indicator("Daily Weekly Monthly Highs & Lows", "DWM HL", true, max_lines_count=500)

//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var DAILY_LINE_STYLE	= line.style_dashed
var DAILY_LINE_WITDH	= 1
var WEEKLY_LINE_STYLE	= line.style_dashed
var WEEKLY_LINE_WIDTH	= 1
var MONTHLY_LINE_STYLE	= line.style_dashed
var MONTHLY_LINE_WIDTH 	= 1

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

var i_isDailyEnabled    = input     (true,			"Daily",	inline="Daily")
var i_dailyColor        = input     (color.green,	"",			inline="Daily")
var i_dailyLookback		= input.int	(2, 			"",	0,		inline="Daily")
var i_isWeeklyEnabled   = input     (true,			"Weekly",	inline="Weekly")
var i_weeklyColor       = input     (color.orange,  "",			inline="Weekly")
var i_weeklyLookback	= input.int	(1, 			"", 0,		inline="Weekly")
var i_isMonthlyEnabled  = input     (true,			"Monthly",	inline="Monthly")
var i_monthlyColor      = input     (color.red,     "",			inline="Monthly")
var i_monthlyLookback	= input.int	(1, 			"", 0,		inline="Monthly")

//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var a_lastHighs             			= array.new_float(3)
var a_lastLows             				= array.new_float(3)
var canShowDaily						= i_isDailyEnabled and timeframe.isintraday
var canShowWeekly						= i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly						= i_isMonthlyEnabled and not timeframe.ismonthly

[dailyTime, dailyHigh, dailyLow, isLastDaily] 			= request.security(syminfo.tickerid, 'D', [time, high, low, barstate.islast], lookahead=barmerge.lookahead_on)
[weeklyTime, weeklyHigh, weeklyLow, isLastWeekly] 		= request.security(syminfo.tickerid, 'W', [time, high, low, barstate.islast], lookahead=barmerge.lookahead_on)
[monthlyTime, monthlyHigh, monthlyLow, isLastMonthly]	= request.security(syminfo.tickerid, 'M', [time, high, low, barstate.islast], lookahead=barmerge.lookahead_on)

hasDailyTimeChanged 					= dailyTime != dailyTime[1]
hasWeekklyTimeChanged 					= weeklyTime != weeklyTime[1]
hasMonthlyTimeChanged 					= monthlyTime != monthlyTime[1]

//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_draw(bool _isNew, float _y, int _lookback, color _color, string _style, int _width) =>
	var line _body 	= na
	var _bodies     = array.new_line()

	if _isNew
		line.set_x2(_body, bar_index)
		_body := line.new(bar_index, _y, bar_index, _y, color=_color, style=_style, width=_width)
		array.push(_bodies, _body)

		if array.size(_bodies) > _lookback + 1
            line.delete(array.shift(_bodies))

//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

if canShowDaily and hasDailyTimeChanged and not isLastDaily
	array.set(a_lastHighs, 0, dailyHigh)
	array.set(a_lastLows, 0, dailyLow)

if canShowWeekly and hasWeekklyTimeChanged and not isLastWeekly
	array.set(a_lastHighs, 1, weeklyHigh)
	array.set(a_lastLows, 1, weeklyLow)

if canShowMonthly and hasMonthlyTimeChanged and not isLastMonthly
	array.set(a_lastHighs, 2, monthlyHigh)
	array.set(a_lastLows, 2, monthlyLow)

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if canShowMonthly
	f_draw(hasMonthlyTimeChanged, monthlyHigh, i_monthlyLookback, i_monthlyColor, MONTHLY_LINE_STYLE, MONTHLY_LINE_WIDTH)
	f_draw(hasMonthlyTimeChanged, monthlyLow, i_monthlyLookback, i_monthlyColor, MONTHLY_LINE_STYLE, MONTHLY_LINE_WIDTH)

if canShowWeekly
	f_draw(hasWeekklyTimeChanged, weeklyHigh, i_weeklyLookback, i_weeklyColor, WEEKLY_LINE_STYLE, WEEKLY_LINE_WIDTH)
	f_draw(hasWeekklyTimeChanged, weeklyLow, i_weeklyLookback, i_weeklyColor, WEEKLY_LINE_STYLE, WEEKLY_LINE_WIDTH)

if canShowDaily
	f_draw(hasDailyTimeChanged, dailyHigh, i_dailyLookback, i_dailyColor, DAILY_LINE_STYLE, DAILY_LINE_WITDH)
	f_draw(hasDailyTimeChanged, dailyLow, i_dailyLookback, i_dailyColor, DAILY_LINE_STYLE, DAILY_LINE_WITDH)

// Plot invisible opens for displaying last values in `status line`, `scale`, `data window` as well for providing defaults alert conditions

plot(array.get(a_lastHighs, 0),	"DH",	color.new(i_dailyColor, 100),   editable=false)
plot(array.get(a_lastLows, 0), 	"DL",	color.new(i_dailyColor, 100),   editable=false)
plot(array.get(a_lastHighs, 1), "WH",	color.new(i_weeklyColor, 100),  editable=false)
plot(array.get(a_lastLows, 1), 	"WL",	color.new(i_weeklyColor, 100),  editable=false)
plot(array.get(a_lastHighs, 2), "MH",	color.new(i_monthlyColor, 100), editable=false)
plot(array.get(a_lastLows, 2), 	"ML",	color.new(i_monthlyColor, 100), editable=false)

//----------------------------- Functions -----------------------------

//// Check if current time is within the first session of the day (e.g. EURUSD Monday 00:00-16:59)
//f_isFirstSession() => hour(timenow) < hour(dailyTime)
//
//// Check if current time is within the last session of the day (e.g. EURUSD Monday 17:00-23:59)
//f_isLastSession() => hour(timenow) >= hour(dailyTime)
//
//// Check if current date is on a given weekday
//f_isWeekday(_weekday) => dayofweek(timenow) == _weekday
//
//// Get from a given date the weekday count ordered from Monday to Sunday [1-7]
//f_getWeekday(_t) => dayofweek(_t) == dayofweek.sunday ? 7 : dayofweek(_t) -1
//
//// Get index of the current weekday ordered from Monday to Sunday [0-6]
//f_getWeekdayIndex() => f_getWeekday(timenow) - 1

//------------------------------- Logic -------------------------------

//// The calculation for the display in a range from right to left starts at current date `timenow`
//// On non 24x7 markets, there is an inherent problematic of missing bars when market are closed (holidays, weekends)
//// While it isn't possible to account for holidays we can adjust the range on weekends
//
//isMarket24x7 = f_getWeekday(lastTradingDayOfTheWeek) == 7
//
//currentSessionIdx = not isMarket24x7 and f_isLastSession() ? (f_isWeekday(dayofweek.sunday) ? 0 : f_getWeekdayIndex() + 1) : f_getWeekdayIndex()
//
//isOverlapingWeekend = currentSessionIdx - i_dailyLookback < 0
//
//isSaturdaySession = currentSessionIdx == 5
//
//isSundaySession = currentSessionIdx == 6
//
//// Adjustments:
//
//// 1. If a trading session overlaps two days (e.g. forex 17:00 - 17:00) we adjust at the first day
//adjustmentForOvernightSession = f_isFirstSession() ? 1 : 0
//
//// 2. When trading into the week we adjust at the first trading session
//adjustmentForweeklyTimeDate = currentSessionIdx
//
//// 3. When previous x days overlap a weekend and if market was closed we adjust at previous week's last trading session
//adjustmentForWeekend = 0
//
//// 4. When current time is on a weekend, if market is closed we adjust at the last trading session
//adjustmentForWeekendOverlap = 0
//
//if not isMarket24x7
//	adjustmentForWeekend		:= isSaturdaySession ? 1 : isSundaySession ? 2 : 0
//	adjustmentForWeekendOverlap	:= isOverlapingWeekend ? 2 : 0
//
//dayLimitLeft = timestamp(
// year(timenow),
// month(timenow),
// dayofmonth(timenow) - adjustmentForOvernightSession - adjustmentForWeekendOverlap - adjustmentForWeekend - i_dailyLookback,
// hour(dailyTime),
// minute(dailyTime),
// second(dailyTime))
//
//weekLimitLeft = timestamp(
// year(timenow),
// month(timenow),
// dayofmonth(timenow) - adjustmentForOvernightSession - adjustmentForweeklyTimeDate - adjustmentForWeekend - i_weeklyLookback * 7,
// hour(weeklyTime),
// minute(weeklyTime),
// second(weeklyTime))
//
//monthLimitLeft = timestamp(
// year(timenow),
// month(timenow) - i_monthlyLookback,
// 1 - adjustmentForOvernightSession,
// hour(monthlyTime),
// minute(monthlyTime),
// second(monthlyTime))
//
//canShowDay		= time >= dayLimitLeft and not isLastDay and timeframe.isintraday
//canShowWeek		= time >= weekLimitLeft and not isLastWeek and not timeframe.isweekly and not timeframe.ismonthly
//canShowMonth	= time >= monthLimitLeft and not isLastMonth and not timeframe.ismonthly

//------------------------- Plotting ---------------------------------

//plot(canShowDay ? dailyHigh : na,		title = "Day Highs",	linewidth = dayLinewidth,	color = dayColor,	style = dayStyle)
//plot(canShowDay ? dailyLow : na,		title = "Day Lows",		linewidth = dayLinewidth,	color = dayColor,	style = dayStyle)
//plot(canShowWeek ? weeklyHigh : na,	title = "Week Highs",	linewidth = weekLinewidth,	color = weekColor, 	style = weekStyle)
//plot(canShowWeek ? weeklyLow : na,	title = "Week Lows",	linewidth = weekLinewidth,	color = weekColor, 	style = weekStyle)
//plot(canShowMonth ? monthlyHigh : na,	title = "Month Highs",	linewidth = monthLinewidth,	color = monthColor, style = monthStyle)
//plot(canShowMonth ? monthlyLow : na,	title = "Month Lows",	linewidth = monthLinewidth,	color = monthColor, style = monthStyle)

